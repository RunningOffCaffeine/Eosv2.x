# [include extruder-pa.cfg]
[include build-sheets.cfg]
[include filaments.cfg]
[include auto-speed.cfg]
[include TEST_SPEED/test_speed.cfg]
[include CALIBRATION/tuning_macros.cfg]      # Either include this or KAMP_Settings.cfg
[include KAMP_Settings.cfg]                # as it is included in tuning_macros.cfg
# [include led_config_BARF.cfg]


## -------------------------------------------------------
## LEDs
## -------------------------------------------------------


[gcode_macro _STATUS_READY]
gcode:
  SET_LED LED="rgb_light" RED=0.843 GREEN=0.145 BLUE=0.576 WHITE=0 SYNC=0 TRANSMIT=1 INDEX=1
  SET_LED LED="rgb_light" RED=0.843 GREEN=0.145 BLUE=0.576 WHITE=0 SYNC=0 TRANSMIT=1 INDEX=2
  SET_LED LED="rgb_light" RED=0.843 GREEN=0.145 BLUE=0.576 WHITE=0 SYNC=0 TRANSMIT=1 INDEX=3

[gcode_macro _SET_STATUS_READY]
gcode:
    {% if printer['gcode_macro _STATUS_READY'] is defined %}
        RESPOND PREFIX=✨️ TYPE=command MSG="Setting printer status LED to READY"
        _STATUS_READY
    {% endif %}

[delayed_gcode _set_led_to_ready]
initial_duration: 1 # This ensures it runs 1 second after printer bootup
gcode:
    _SET_STATUS_READY


[gcode_macro _STATUS_BUSY]
gcode:
  SET_LED LED="rgb_light" RED=1 GREEN=0.5 BLUE=0 WHITE=0 SYNC=0 TRANSMIT=1 INDEX=1
  SET_LED LED="rgb_light" RED=1 GREEN=0.5 BLUE=0 WHITE=0 SYNC=0 TRANSMIT=1 INDEX=2
  SET_LED LED="rgb_light" RED=1 GREEN=0.5 BLUE=0 WHITE=0 SYNC=0 TRANSMIT=1 INDEX=3
  
[gcode_macro _SET_STATUS_BUSY]
gcode:
    {% if printer['gcode_macro _STATUS_BUSY'] is defined %}
        RESPOND PREFIX=✨️ TYPE=command MSG="Setting printer status LED to BUSY"
        _STATUS_BUSY
    {% endif %}


[gcode_macro _STATUS_HEATING]
gcode:
  SET_LED LED="rgb_light" RED=1 GREEN=0 BLUE=0 WHITE=0 SYNC=0 TRANSMIT=1 INDEX=1
  SET_LED LED="rgb_light" RED=1 GREEN=0 BLUE=0 WHITE=0 SYNC=0 TRANSMIT=1 INDEX=2
  SET_LED LED="rgb_light" RED=1 GREEN=0 BLUE=0 WHITE=0 SYNC=0 TRANSMIT=1 INDEX=3

[gcode_macro _SET_STATUS_HEATING]
gcode:
    {% if printer['gcode_macro _STATUS_HEATING'] is defined %}
        RESPOND PREFIX=✨️ TYPE=command MSG="Setting printer status LED to HEATING"
        _STATUS_MESHING
    {% endif %}


[gcode_macro _STATUS_LEVELING]
gcode:
  SET_LED LED="rgb_light" RED=0.337 GREEN=0.922 BLUE=0.067 WHITE=0 SYNC=0 TRANSMIT=1 INDEX=1
  SET_LED LED="rgb_light" RED=0.337 GREEN=0.922 BLUE=0.067 WHITE=0 SYNC=0 TRANSMIT=1 INDEX=2
  SET_LED LED="rgb_light" RED=0.337 GREEN=0.922 BLUE=0.067 WHITE=0 SYNC=0 TRANSMIT=1 INDEX=3
  
[gcode_macro _SET_STATUS_LEVELING]
gcode:
    {% if printer['gcode_macro _STATUS_LEVELING'] is defined %}
        RESPOND PREFIX=✨️ TYPE=command MSG="Setting printer status LED to LEVELING"
        _STATUS_LEVELING
    {% endif %}


[gcode_macro _STATUS_HOMING]
gcode:
  SET_LED LED="rgb_light" RED=0.604 GREEN=0.922 BLUE=0.063 WHITE=0 SYNC=0 TRANSMIT=1 INDEX=1
  SET_LED LED="rgb_light" RED=0.604 GREEN=0.922 BLUE=0.063 WHITE=0 SYNC=0 TRANSMIT=1 INDEX=2
  SET_LED LED="rgb_light" RED=0.604 GREEN=0.922 BLUE=0.063  WHITE=0 SYNC=0 TRANSMIT=1 INDEX=3

[gcode_macro _SET_STATUS_HOMING]
gcode:
    {% if printer['gcode_macro _STATUS_HOMING'] is defined %}
        RESPOND PREFIX=✨️ TYPE=command MSG="Setting printer status LED to HOMING"
        _STATUS_HOMING
    {% endif %}


[gcode_macro _STATUS_CLEANING]
gcode:
  SET_LED LED="rgb_light" RED=0.063 GREEN=0.722 BLUE=0.922 WHITE=0 SYNC=0 TRANSMIT=1 INDEX=1
  SET_LED LED="rgb_light" RED=1 GREEN=1 BLUE=0 WHITE=1 SYNC=0 TRANSMIT=1 INDEX=2
  SET_LED LED="rgb_light" RED=1 GREEN=1 BLUE=0  WHITE=1 SYNC=0 TRANSMIT=1 INDEX=3

[gcode_macro _SET_STATUS_CLEANING]
gcode:
    {% if printer['gcode_macro _STATUS_CLEANING'] is defined %}
        RESPOND PREFIX=✨️ TYPE=command MSG="Setting printer status LED to CLEANING"
        _STATUS_CLEANING
    {% endif %}


[gcode_macro _STATUS_MESHING]
gcode:
  SET_LED LED="rgb_light" RED=0.89 GREEN=0.612 BLUE=0.059 WHITE=0 SYNC=0 TRANSMIT=1 INDEX=1
  SET_LED LED="rgb_light" RED=1 GREEN=1 BLUE=0 WHITE=1 SYNC=0 TRANSMIT=1 INDEX=2
  SET_LED LED="rgb_light" RED=0 GREEN=0 BLUE=1  WHITE=1 SYNC=0 TRANSMIT=1 INDEX=3

[gcode_macro _SET_STATUS_MESHING]
gcode:
    {% if printer['gcode_macro _STATUS_MESHING'] is defined %}
        RESPOND PREFIX=✨️ TYPE=command MSG="Setting printer status LED to MESHING"
        _STATUS_MESHING
    {% endif %}


[gcode_macro _STATUS_CALIBRATING_Z]
gcode:
  SET_LED LED="rgb_light" RED=0.094 GREEN=0.988 BLUE=0.145 WHITE=0 SYNC=0 TRANSMIT=1 INDEX=1
  SET_LED LED="rgb_light" RED=1 GREEN=1 BLUE=1 WHITE=1 SYNC=0 TRANSMIT=1 INDEX=2
  SET_LED LED="rgb_light" RED=1 GREEN=1 BLUE=1  WHITE=1 SYNC=0 TRANSMIT=1 INDEX=3

[gcode_macro _SET_STATUS_CALIBRATING_Z]
gcode:
    {% if printer['gcode_macro _STATUS_CALIBRATING_Z'] is defined %}
        RESPOND PREFIX=✨️ TYPE=command MSG="Setting printer status LED to CALIBRATING_Z"
        _STATUS_CALIBRATING_Z
    {% endif %}


[gcode_macro _STATUS_PURGING]
gcode:
  SET_LED LED="rgb_light" RED=1 GREEN=0.498 BLUE=0.522 WHITE=0 SYNC=0 TRANSMIT=1 INDEX=1
  SET_LED LED="rgb_light" RED=1 GREEN=1 BLUE=1 WHITE=1 SYNC=0 TRANSMIT=1 INDEX=2
  SET_LED LED="rgb_light" RED=1 GREEN=1 BLUE=1  WHITE=1 SYNC=0 TRANSMIT=1 INDEX=3
  
[gcode_macro _SET_STATUS_PURGING]
gcode:
    {% if printer['gcode_macro _STATUS_PURGING'] is defined %}
        RESPOND PREFIX=✨️ TYPE=command MSG="Setting printer status LED to PURGING"
        _STATUS_PURGING
    {% endif %}


[gcode_macro _STATUS_PRINTING]
gcode:
  SET_LED LED="rgb_light" RED=0.843 GREEN=0.145 BLUE=0.576 WHITE=0 SYNC=0 TRANSMIT=1 INDEX=1
  SET_LED LED="rgb_light" RED=1 GREEN=1 BLUE=1 WHITE=1 SYNC=0 TRANSMIT=1 INDEX=2
  SET_LED LED="rgb_light" RED=1 GREEN=1 BLUE=1  WHITE=1 SYNC=0 TRANSMIT=1 INDEX=3
  
[gcode_macro _SET_STATUS_PRINTING]
gcode:
    {% if printer['gcode_macro _STATUS_PRINTING'] is defined %}
        RESPOND PREFIX=✨️ TYPE=command MSG="Setting printer status LED to PRINTING"
        _STATUS_PRINTING
    {% endif %}


[gcode_macro _STATUS_OFF]
gcode:
  SET_LED LED="rgb_light" RED=0 GREEN=0 BLUE=0 WHITE=0 SYNC=0 TRANSMIT=1 INDEX=1
  SET_LED LED="rgb_light" RED=0 GREEN=0 BLUE=0 WHITE=0 SYNC=0 TRANSMIT=1 INDEX=2
  SET_LED LED="rgb_light" RED=0 GREEN=0 BLUE=0 WHITE=0 SYNC=0 TRANSMIT=1 INDEX=3

[gcode_macro _HEADLIGHT_ON]
gcode:
  SET_LED LED="rgb_light" RED=1 GREEN=1 BLUE=1 WHITE=1 SYNC=0 TRANSMIT=1 INDEX=2
  SET_LED LED="rgb_light" RED=1 GREEN=1 BLUE=1  WHITE=1 SYNC=0 TRANSMIT=1 INDEX=3

[gcode_macro _HEADLIGHT_OFF]
gcode:
  SET_LED LED="rgb_light" RED=0 GREEN=0 BLUE=0 WHITE=0 SYNC=0 TRANSMIT=1 INDEX=2
  SET_LED LED="rgb_light" RED=0 GREEN=0 BLUE=0 WHITE=0 SYNC=0 TRANSMIT=1 INDEX=3

[gcode_macro _SET_STATUS_OFF]
gcode:
    {% if printer['gcode_macro _STATUS_OFF'] is defined %}
        RESPOND PREFIX=✨️ TYPE=command MSG="Setting printer status LED to OFF"
        _STATUS_OFF
        _HEADLIGHT_OFF
    {% endif %}


[gcode_macro M300]
gcode:
    {% set S = params.S|default(1000)|int %} # Use a default 1kHz tone if S is omitted.
    {% set P = params.P|default(100)|int %}  # Use a 10ms duration is P is omitted.
    SET_PIN PIN=BEEPER_pin VALUE=0.5 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
    G4 P{P}
    SET_PIN PIN=BEEPER_pin VALUE=0

[gcode_macro ERROR_BEEP]
gcode:
    M300 P12 S262
    M300 P321 S196
    M300 P538 S98

[gcode_macro COMPLETE_BEEP]
gcode:
    


## -------------------------------------------------------
## OVERRIDES
## -------------------------------------------------------


[gcode_macro M109] # Wait Hotend Temp
rename_existing: M109.1
gcode:
    #Parameters
    {% set s = params.S|float %}

    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  # Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s-2} MAXIMUM={s+5}   # Wait for hotend temp (within n degrees)
    {% endif %}


[gcode_macro M190] # Wait Bed Temp
rename_existing: M190.1
gcode:
    #Parameters
    {% set s = params.S|float %}

    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   # Set bed temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s-1} MAXIMUM={s+5}  # Wait for bed temp (within n degrees)
    {% endif %}


[gcode_macro G32]
gcode:
    _SET_STATUS_LEVELING
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    G28
    QUAD_GANTRY_LEVEL
    G28
    G0 X175 Y175 Z30 F3600
    _SET_STATUS_READY
    RESTORE_GCODE_STATE NAME=STATE_G32


[gcode_macro G28] # Home
rename_existing: G28.1
gcode:
    _SET_STATUS_HOMING
    G28.1 {rawparams}
    _SET_STATUS_READY

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: BASE_QGL
gcode:
    _SET_STATUS_LEVELING
    BASE_QGL {rawparams}
    G28 Z
    _SET_STATUS_READY

[gcode_macro MESH_CALIBRATE]
gcode:
    _SET_STATUS_MESHING
    BED_MESH_CALIBRATE {rawparams}
    _SET_STATUS_READY

[gcode_macro T0]
gcode:


## -------------------------------------------------------
## PRINT START & END
## -------------------------------------------------------

[gcode_macro HEATSOAK]
#
# HEATSOAK
#
# Use the bed to preheat the chamber; the nozzle is placed just above the 
# centre of the bed to act as a proxy for a chamber thermistor. 
#
# The bed heats and waits for DELAY minutes at the set temperature. After 
# DELAY, the extruder temperature is monitored and the heatsoak doesn't 
# complete until after the AMBIENT temperature is "reached" (i.e., when 
# the extruder reports it is at AMBIENT).
#
# If you have a chamber thermistor, you can monitor that in the 
# TEMPERATURE_WAIT instead.
#
# If you don't want to delay for a set amount of time and just want to wait
# until the AMBIENT temperature is reached, you can set DELAY to 0.
#
description: Preheat the chamber using the bed. BED=105 AMBIENT=40 DELAY=15 (minutes)
gcode:
    {% set BED = params.BED|default(105)|float %}
    {% set CHAMBER = params.CHAMBER|default(0)|float %}
    {% set DELAY = params.DELAY|default(0)|float %}
    {% set HEATSOAK = params.SOAK|default(1) %}
    {% set mid_x = printer.toolhead.axis_maximum.x|float / 2.0 %}
    {% set mid_y = printer.toolhead.axis_maximum.y|float / 2.0 %}
    
    _STATUS_HEATING
    M190 S{BED}
    
    _STATUS_HOMING
    CONDITIONAL_HOME
    CENTER

    SMART_PARK
        
    _STATUS_HEATING
    {% if printer['fan_generic chamber_filter'] is defined %}
        SET_FAN_SPEED FAN=chamber_filter SPEED=1
    {% endif %}
    M190 S{BED}
    
    # M300

    # {% if HEATSOAK == 0 %}
      # # skip heatsoak
    
    # --- New Heatsoak Logic ---
    {% if CHAMBER > 0 %}
      # Option 1: Wait for a specific Chamber temperature
      RESPOND PREFIX=🌡️ TYPE=command MSG="Heatsoak starting: Bed={BED}C, Chamber={CHAMBER}C. Waiting for Chamber sensor to reach {CHAMBER}C."
      M117 Waiting for Chamber temp {CHAMBER}C
      M118 Waiting for Chamber sensor = {CHAMBER}C
      TEMPERATURE_WAIT SENSOR="temperature_sensor Chamber" MINIMUM={CHAMBER}

    {% elif DELAY > 0 %}
      # Option 2: Wait for a specific DELAY time
      RESPOND PREFIX=🌡️ TYPE=command MSG="Heatsoak starting: Bed={BED}C. Holding bed temp for {DELAY} minutes."
      M117 Holding bed temp {BED}C for {DELAY}min
      {% if DELAY >= 2 %}
          {% set block_count = 5 %}
          {% set D_block = DELAY / block_count %}
          {% for i in range(block_count) %}
              {% set D_time = DELAY - (D_block * i) %}
              M117 Waiting {D_time|round(1)}min...
              M118 Waiting {D_time|round(1)}min...
              G4 P{D_block * 60 * 1000}
          {% endfor %}
      {% else %}
          G4 P{DELAY * 60 * 1000}
      {% endif %}

    {% else %}
      # Option 3: Fallback to 15-minute delay (when CHAMBER=0 and DELAY=0)
      {% set FALLBACK_DELAY = 15.0 %}
      RESPOND PREFIX=🌡️ TYPE=command MSG="Heatsoak starting: Bed={BED}C. No Chamber temp or Delay specified. Falling back to {FALLBACK_DELAY} minute delay."
      M117 Fallback: Holding bed temp {BED}C for {FALLBACK_DELAY}min
      {% set block_count = 5 %}
      {% set D_block = FALLBACK_DELAY / block_count %}
      {% for i in range(block_count) %}
          {% set D_time = FALLBACK_DELAY - (D_block * i) %}
          M117 Waiting {D_time|round(1)}min...
          M118 Waiting {D_time|round(1)}min...
          G4 P{D_block * 60 * 1000}
      {% endfor %}
    {% endif %}
    # --- End New Heatsoak Logic ---

    _STATUS_READY
    M117 Heatsoak complete.
    M118 Heatsoak complete.
    
    # UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=60
    # M300 S440 P1000


[gcode_macro PRINT_START]
gcode:
    START_PRINT {rawparams}    

[gcode_macro START_PRINT] # BEACON
description: Advanced print start sequence for Beacon with dynamic PA.
gcode:
    _SET_STATUS_READY

    # --- Get all slicer parameters ---
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(210)|float %}
    {% set CHAMBER_TEMP = params.CHAMBER_TEMP|default(0)|float %}
    {% set MATERIAL = params.MATERIAL|default("PLA")|upper %}
    {% set NOZZLE_SIZE = params.NOZZLE_SIZE|default(0.4)|float %}
    {% set LAYER_HEIGHT = params.LAYER_HEIGHT|default(0.2)|float %}
    {% set LINE_WIDTH = params.LINE_WIDTH|default(NOZZLE_SIZE * 1.25)|float %}
    {% set PRINT_SPEED = params.PRINT_SPEED|default(60)|float %}
    {% set TUBE_LENGTH = params.TUBE_LENGTH|default(0.5)|float %}

    # --- NOZZLE SIZE VERIFICATION ---
    {% set KLIPPER_NOZZLE = printer.extruder.nozzle_diameter %}
    {% if (NOZZLE_SIZE - KLIPPER_NOZZLE)|abs > 0.01 %}
        {action_raise_error("Nozzle size mismatch! Slicer: %.2fmm, Printer: %.2fmm." % (NOZZLE_SIZE, KLIPPER_NOZZLE))}
    {% endif %}

    # --- Set initial printer state & filament profiles ---
    M117 Setting material profiles...
    SET_GCODE_OFFSET Z=0 MOVE=1
    _SET_MPC_MATERIAL MATERIAL={MATERIAL}
    _SET_FIRMWARE_RETRACTION MATERIAL={MATERIAL}

    # --- Pressure Advance Calculation ---
    _CALCULATE_NL_PA MATERIAL={MATERIAL} NOZZLE_SIZE={NOZZLE_SIZE}
    # _CALCULATE_PA MATERIAL={MATERIAL} NOZZLE_SIZE={NOZZLE_SIZE} LAYER_HEIGHT={LAYER_HEIGHT} LINE_WIDTH={LINE_WIDTH} PRINT_SPEED={PRINT_SPEED} TUBE_LENGTH={TUBE_LENGTH}

    # --- Heating and Homing ---
    BED_MESH_CLEAR
    M117 Heating bed and pre-heating nozzle...

    _SET_STATUS_HEATING
    {% if CHAMBER_TEMP != 0 and MATERIAL == "ABS" or "ASA" %}
      HEATSOAK BED={BED_TEMP} CHAMBER={CHAMBER_TEMP}
    {% elif CHAMBER_TEMP == 0 and MATERIAL == "ABS" or "ASA" %}
      HEATSOAK BED={BED_TEMP} CHAMBER=40
    {% else %} 
      HEATSOAK BED={BED_TEMP}
    {% endif %}

    {% if sheet and sheet.name | lower == 'smooth pei' %}
        {action_respond_info("Smooth PEI sheet detected. Heating nozzle to 150°C for probing.")}
        M109 S150
    {% else %}
        {action_respond_info("Textured or other sheet detected. Heating nozzle to full temp for probing.")}
        M109 S{EXTRUDER_TEMP}
    {% endif %}

    
    _SET_STATUS_HOMING
    G28
    SMART_PARK

    # # Nozzle Wipe Macro to ensure first layer Beacon contact is accurate
    # WIPE_NOZZLE

    # --- Calibration Sequence ---
    M117 Calibrating...
    _SET_STATUS_CALIBRATING_Z
    G28 Z METHOD=CONTACT CALIBRATE=1  ; Calibrate Z offset and Beacon model

    _SET_STATUS_LEVELING
    QUAD_GANTRY_LEVEL

    _SET_STATUS_MESHING
    MESH_CALIBRATE RUNS=2

    _SET_STATUS_CALIBRATING_Z
    G28 Z METHOD=CONTACT CALIBRATE=0  ; Re-check Z

    # --- Final Heat and Home ---
    _SET_STATUS_HEATING
    {% if sheet and sheet.name | lower == 'smooth pei' %}
        {action_respond_info("Smooth PEI sheet detected. Expanding offset to account for thermal expansion.")}
        {% set OFFSET = 0.045 %}
    {% else %}
        {action_respond_info("Textured or other sheet detected. Probed at temp, keeping offset.")}
        M109 S{EXTRUDER_TEMP}
        {% set OFFSET = 0.0   %}
    {% endif %}

    _SET_STATUS_HEATING
    M117 Final heating and purging...
    M109 S{EXTRUDER_TEMP}              ; Wait for final nozzle temp (this is short and can block)
    SET_GCODE_OFFSET Z={OFFSET}

    _SET_STATUS_PURGING
    VORON_PURGE

    _SET_STATUS_PRINTING
    M117 Print starting!


[gcode_macro PHASE_1]
description: Sets profiles, heats, and homes the printer.
gcode:
    _SET_STATUS_READY

    # --- Get all slicer parameters ---
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(210)|float %}
    {% set CHAMBER_TEMP = params.CHAMBER_TEMP|default(0)|float %}
    {% set MATERIAL = params.MATERIAL|default("PLA")|upper %}
    {% set NOZZLE_SIZE = params.NOZZLE_SIZE|default(0.4)|float %}
    {% set LAYER_HEIGHT = params.LAYER_HEIGHT|default(0.2)|float %}
    {% set LINE_WIDTH = params.LINE_WIDTH|default(NOZZLE_SIZE * 1.25)|float %}
    {% set PRINT_SPEED = params.PRINT_SPEED|default(60)|float %}
    {% set TUBE_LENGTH = params.TUBE_LENGTH|default(0.5)|float %}

    # --- NOZZLE SIZE VERIFICATION ---
    {% set KLIPPER_NOZZLE = printer.extruder.nozzle_diameter %}
    {% if (NOZZLE_SIZE - KLIPPER_NOZZLE)|abs > 0.01 %}
        {action_raise_error("Nozzle size mismatch! Slicer: %.2fmm, Printer: %.2fmm." % (NOZZLE_SIZE, KLIPPER_NOZZLE))}
    {% endif %}

    # --- Set initial printer state & filament profiles ---
    M117 Setting material profiles...
    SET_GCODE_OFFSET Z=0 MOVE=1
    _SET_MPC_MATERIAL MATERIAL={MATERIAL}
    _SET_FIRMWARE_RETRACTION MATERIAL={MATERIAL}

    # --- Pressure Advance Calculation ---
    _CALCULATE_NL_PA MATERIAL={MATERIAL} NOZZLE_SIZE={NOZZLE_SIZE}
    # _CALCULATE_PA MATERIAL={MATERIAL} NOZZLE_SIZE={NOZZLE_SIZE} LAYER_HEIGHT={LAYER_HEIGHT} LINE_WIDTH={LINE_WIDTH} PRINT_SPEED={PRINT_SPEED} TUBE_LENGTH={TUBE_LENGTH}

    # --- Heating and Homing ---
    BED_MESH_CLEAR
    M117 Heating bed and pre-heating nozzle...

    _SET_STATUS_HEATING
    {% if CHAMBER_TEMP != 0 and MATERIAL == "ABS" or "ASA" %}
      HEATSOAK BED={BED_TEMP} CHAMBER={CHAMBER_TEMP}
    {% elif CHAMBER_TEMP == 0 and MATERIAL == "ABS" or "ASA" %}
      HEATSOAK BED={BED_TEMP} CHAMBER=40
    {% else %} 
      HEATSOAK BED={BED_TEMP}
    {% endif %}

    {% if sheet and sheet.name | lower == 'smooth pei' %}
        {action_respond_info("Smooth PEI sheet detected. Heating nozzle to 150°C for probing.")}
        M109 S150
    {% else %}
        {action_respond_info("Textured or other sheet detected. Heating nozzle to full temp for probing.")}
        M109 S{EXTRUDER_TEMP}
    {% endif %}

    
    _SET_STATUS_HOMING
    G28
    SMART_PARK
    
    # _SET_STATUS_HEATING
    # M117 Waiting for temps before calibration...
    # {% if sheet and sheet.name | lower == 'smooth pei' %}
    #     {action_respond_info("Smooth PEI sheet detected. Heating nozzle to 150°C for calibration.")}
    #     M109 S150
    # {% else %}
    #     {action_respond_info("Textured or other sheet detected. Heating nozzle to full temp for calibration.")}
    #     M109 S{EXTRUDER_TEMP}
    # {% endif %}
    # M190 S{BED_TEMP}


[gcode_macro PHASE_2]
description: Runs QGL and creates the bed mesh.
gcode:
    M117 Calibrating...
    _SET_STATUS_CALIBRATING_Z
    G28 Z METHOD=CONTACT CALIBRATE=1  ; Calibrate Z offset and Beacon model

    _SET_STATUS_LEVELING
    QUAD_GANTRY_LEVEL

    _SET_STATUS_MESHING
    MESH_CALIBRATE RUNS=2

    _SET_STATUS_CALIBRATING_Z
    G28 Z METHOD=CONTACT CALIBRATE=0  ; Re-check Z


[gcode_macro PHASE_3]
description: Heats nozzle to final temp and runs the purge line.
gcode:
    # Get Slicer Params
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(210)|float %}

    _SET_STATUS_HEATING
    {% if sheet and sheet.name | lower == 'smooth pei' %}
        {action_respond_info("Smooth PEI sheet detected. Expanding offset to account for thermal expansion.")}
        {% set OFFSET = 0.06 %}
    {% else %}
        {action_respond_info("Textured or other sheet detected. Probed at temp, keeping offset.")}
        M109 S{EXTRUDER_TEMP}
        {% set OFFSET = 0.0  %}
    {% endif %}

    _SET_STATUS_HEATING
    M117 Final heating and purging...
    M109 S{EXTRUDER_TEMP}              ; Wait for final nozzle temp (this is short and can block)
    SET_GCODE_OFFSET Z={OFFSET}

    _SET_STATUS_PURGING
    VORON_PURGE

    _SET_STATUS_PRINTING
    M117 Print starting!


[gcode_macro PRINT_END]
gcode:
    END_PRINT {rawparams}

    
[gcode_macro END_PRINT]
gcode:
    # Move nozzle away from print while retracting
    G91
    G1 Z5 E-2 F800
    G1 X-2 Y-2 E2 F800 ;Extrude slightly 
    G1 X-2 Y-2 E-18 F800
    G1 X-20 Y-20 F800
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    # Park nozzle
    PARK Z={printer.toolhead.position.z + 10}
    G90
    # # Disable steppers
    # M84

    _SET_STATUS_OFF


[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    # Park nozzle
    PARK Z={printer.toolhead.position.z + 10}
    G90
    # # Disable steppers
    # M84
    BASE_CANCEL_PRINT

## -------------------------------------------------------
## MOVEMENT MACROS
## -------------------------------------------------------

[gcode_macro FRONT]
description: Move toolhead to the front-center of the bed
gcode:
    {% set x_center = printer.toolhead.axis_maximum.x / 2 %}
    {% set y_front = printer.toolhead.axis_minimum.y + 10 %}
    G90
    G0 X{x_center} Y{y_front} F{6000}

[gcode_macro CENTER]
description: Move toolhead to the absolute center of the bed
gcode:
    {% set x_center = printer.toolhead.axis_maximum.x / 2 %}
    {% set y_center = printer.toolhead.axis_maximum.y / 2 %}
    G90
    G0 X{x_center} Y{y_center} F{6000}

[gcode_macro REAR]
description: Move toolhead to the rear-center of the bed
gcode:
    {% set x_center = printer.toolhead.axis_maximum.x / 2 %}
    {% set y_rear = printer.toolhead.axis_maximum.y - 10 %}
    G90
    G0 X{x_center} Y{y_rear} F{6000}

[gcode_macro PARK]
description: Park the toolhead at a specified or default location.
gcode:
    # --- Get live printer dimensions and speeds ---
    {% set z_max = printer.toolhead.axis_maximum.z %}
    {% set z_pos = printer.toolhead.position.z %}
    {% set y_max = printer.toolhead.axis_maximum.y %}
    {% set x_max = printer.toolhead.axis_maximum.x %}
    {% set travel_speed = printer.toolhead.max_velocity * 60 * 0.5 %} # * 60 converts from mm/sec to mm/min
    {% set z_travel_speed = printer.configfile.settings.printer.max_z_velocity * 60 * 0.75 %} # * 60 converts from mm/sec to mm/min
    
    # --- Define default park height ---
    {% set park_height = (z_max * 0.65)|int %}

    # --- Set park coordinates from parameters or defaults ---
    # The default park position is the back-right corner.
    {% set x_park = params.X|default(x_max - 5) %}
    {% set y_park = params.Y|default(y_max - 5) %}
    {% set z_park = (params.Z|default(park_height))|float %}
    
    # --- Save current G-Code state ---
    SAVE_GCODE_STATE NAME=PARK_STATE
    
    # --- Move Z axis to a safe height ---
    G90 ; Use absolute coordinates
    {% if z_pos < z_park %}
        G1 Z{z_park} F{z_travel_speed} ; Move up to park height
    {% endif %}
    
    # --- Move X and Y axes to park position ---
    G1 X{x_park} Y{y_park} F{travel_speed}
    
    # --- Restore G-Code state ---
    RESTORE_GCODE_STATE NAME=PARK_STATE
    
[gcode_macro PRESENT]
description: Presents the print on a CoreXY by moving the toolhead to the front-center.
gcode:
    # --- Get printer axis limits ---
    {% set x_max = printer.toolhead.axis_maximum.x %}
    {% set y_min = printer.toolhead.axis_minimum.y %}
    {% set z_max = printer.toolhead.axis_maximum.z %}
    
    # --- Calculate center of X-axis ---
    {% set x_center = x_max / 2 %}
    
    # --- Call the PARK macro to move the toolhead ---
    # Moves to the front of the Y-axis and the center of the X-axis.
    PARK X={x_center} Y={y_min + 5} Z={z_max - 30}


## -------------------------------------------------------
## CONDITIONAL MACROS
## -------------------------------------------------------

[gcode_macro CONDITIONAL_HOME]
description: Homes the printer if it has not been homed yet.
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}


## -------------------------------------------------------
## UPDATE MACROS
## -------------------------------------------------------

[gcode_macro _SET_MPC_MATERIAL]
description: Set heater MPC parameters for a given material
variable_filament_table:
    ## Update this table to adjust material settings
    {
        ## ( density, heat capacity )  # suggested heat capacity range
        "PLA"       : ( 1.25, 2.20 ),  # 1.80 - 2.20
        "PETG"      : ( 1.27, 2.20 ),  # 1.70 - 2.20
        "ABS"       : ( 1.08, 2.40 ),  # 1.25 - 2.40
        "ASA"       : ( 1.09, 1.50 ),  # 1.30 - 2.10
    }
gcode:
    {% set material = params.MATERIAL | upper %}
    {% set heater = params.HEATER | default('extruder') %}
    {% set extruder_config = printer.configfile.settings[heater] %}

    {% if material in filament_table %}
        {% set (density, heat_capacity) = filament_table[material] %}

        RESPOND PREFIX=🔥 MSG="Configured {heater} MPC for {material}. Density: {density}, Heat Capacity: {heat_capacity}"
    {% else %}
        {% set density = extruder_config.filament_density %}
        {% set heat_capacity=extruder_config.filament_heat_capacity %}

        RESPOND PREFIX=🔥 MSG="Unknown material '{material}', using default mpc parameters for {heater}"
    {% endif %}

    MPC_SET HEATER={heater} FILAMENT_DENSITY={density} FILAMENT_HEAT_CAPACITY={heat_capacity}

[gcode_macro _SET_FIRMWARE_RETRACTION]
description: Set printer retract parameters for given materials
variable_filament_table:
# The format for each entry is:
# "MATERIAL_NAME": (retract_length, retract_speed, unretract_extra_length, unretract_speed)
  {
    # --- Common Filaments ---
    "PLA":    (0.5, 30, 0.2, 20),
    "PETG":   (1.0, 30, 0.8, 20),
    "ASA":    (0.3, 30, 0.2, 20),
    "ABS":    (0.2, 30, 0.1, 20),    
  }

gcode:
  {% set material = params.MATERIAL | default('PLA') | upper %}

  # Check if the provided material exists in our table.
  {% if material in filament_table %}
    # Retrieve the settings from the table.
    {% set R_LENGTH, R_SPEED, U_EXTRA, U_SPEED = filament_table[material] %}

    # Send a message to the console confirming the change.
    RESPOND PREFIX=⬆️ TYPE=command MSG="Setting firmware retraction for {material}. Retract Length: {R_LENGTH} Retract Speed: {R_SPEED} Load Length: {U_EXTRA} Load Speed: {U_SPEED}"

    # Apply the new retraction settings.
    SET_RETRACTION RETRACT_LENGTH={R_LENGTH} RETRACT_SPEED={R_SPEED} UNRETRACT_EXTRA_LENGTH={U_EXTRA} UNRETRACT_SPEED={U_SPEED}

  {% else %}
    # If the material is not found, raise an error.
    { action_raise_error("Unknown material: '" ~ material ~ "'. Please add it to the _SET_FIRMWARE_RETRACTION macro table.") }
  {% endif %}

[gcode_macro _CALCULATE_PA]
description: Automatically calculate and save Pressure Advance by material and nozzle size.
gcode:
    {% set material = params.MATERIAL | default("PLA") | upper %}
    {% set nozzle_size = params.NOZZLE_SIZE | default(0.4) | float %}
    {% set layer_height = params.LAYER_HEIGHT | default(0.2) | float %}
    {% set line_width = params.LINE_WIDTH | default(nozzle_size * 1.25) | float %}
    {% set print_speed = params.PRINT_SPEED | default(60) | float %}
    {% set tube_length_cm = params.TUBE_LENGTH | default(0.5) | float %}
    {% set filament_diameter = params.FILAMENT_DIAMETER | default(1.75) | float %}

    {% set material_constants = {
        'PLA': 85, 'PETG': 100, 'ABS': 95, 'ASA': 100,
        'TPU': 140, 'FLEX': 140, 'NYLON': 120, 'PA': 120, 'PVB': 85
    } %}

    {% if material in material_constants %}
        {% set K = material_constants[material] %}
        {% set tube_length_dm = tube_length_cm / 10 %}
        {% set filament_area = (3.14159 * (filament_diameter / 2) ** 2) %}
        {% set flow_rate = line_width * layer_height * print_speed %}
        {% set pressure_advance = (flow_rate * tube_length_dm) / (K * filament_area) %}
        
        # Save PA with key specific to material and nozzle size
        SAVE_VARIABLE VARIABLE="pa_{ material }_{ nozzle_size|round(2) }" VALUE="{ pressure_advance|round(4) }"

        SET_PRESSURE_ADVANCE ADVANCE={pressure_advance}

        RESPOND TYPE=command MSG="⬇️ Calculated PA for { material } @ { nozzle_size|round(2) }mm: { pressure_advance|round(4) } (saved)"
    {% else %}
        RESPOND TYPE=command MSG="⚠️ Unknown material '{ material }' for PA calculation. Using printer default."
    {% endif %}


[gcode_macro _CALCULATE_NL_PA]
description: Automatically set Kalico Nonlinear PA values by material and nozzle size.
gcode:
    {% set material = params.MATERIAL | default("PLA") | upper %}
    {% set nozzle_size = params.NOZZLE_SIZE | default(0.4) | float %}
    {% set nozzle_key = "%.1f" | format(nozzle_size) %}

    # --- Kalico Nonlinear PA Profiles ---
    # ❗ IMPORTANT: You must manually tune these values for your printer!
    # The values below are placeholders for demonstration purposes only.
    # Format: 'MATERIAL': { 'NOZZLE_SIZE': {'advance': A, 'offset': O, 'velocity': V, 'time_offset': T} }
    {% set pa_profiles = {
        'PLA': {
            '0.4': {'advance': 0.035, 'offset': 0.050, 'velocity': 1, 'time_offset': 0.015},
            '0.6': {'advance': 0.025, 'offset': 0.040, 'velocity': 1, 'time_offset': 0.012}
        },
        'PETG': {
            '0.4': {'advance': 0.05450, 'offset': 0.286, 'velocity': 1, 'time_offset': 0.020},
        },
        'ABS': {
            '0.4': {'advance': 0.030, 'offset': 0.045, 'velocity': 1, 'time_offset': 0.010}
        },
        'ASA': {
            '0.4': {'advance': 0.040, 'offset': 0.060, 'velocity': 1, 'time_offset': 0.015}
        }
    } %}

    {% if material in pa_profiles and nozzle_key in pa_profiles[material] %}
        {% set profile = pa_profiles[material][nozzle_key] %}
        
        SET_PRESSURE_ADVANCE ADVANCE={profile.advance} OFFSET={profile.offset} VELOCITY={profile.velocity} TIME_OFFSET={profile.time_offset}

        RESPOND TYPE=command MSG="⬇️ Set Kalico PA for {material} @ {nozzle_key}mm: A={profile.advance} O={profile.offset} T={profile.time_offset}"

    {% else %}
        RESPOND TYPE=command MSG="⚠️ No Kalico PA profile for {material} @ {nozzle_key}mm. Using printer default."
    {% endif %}


[gcode_macro SHOW_SAVED_PA]
description: Show all saved Pressure Advance values for materials and nozzle sizes.
gcode:
    {% set svv = printer.save_variables.variables %}
    RESPOND TYPE=command MSG="📦 Saved Pressure Advance values:"
    {% for key, value in svv.items() %}
        {% if key.startswith('pa_') %}
            {% set parts = key.split('_') %}
            {% set mat = parts[1] %}
            {% set noz = parts[2] %}
            RESPOND TYPE=command MSG="• { mat } @ { noz }mm → PA = { value }"
        {% endif %}
    {% endfor %}


[gcode_macro TEST_PA_PATTERN]
description: Print Ellis-style corner test and interactively save Pressure Advance
variable_best_pa: 0.0
gcode:
    {% set start_pa = params.START | default(0) | float %}
    {% set step_pa = params.STEP | default(0.01) | float %}
    {% set loops = params.LOOPS | default(5) | int %}
    {% set square_size = params.SIZE | default(40) | float %}
    {% set offset = params.OFFSET | default(5) | float %}
    {% set speed = params.SPEED | default(60) | float %}
    {% set layer_height = params.LAYER_HEIGHT | default(0.2) | float %}
    {% set height = params.HEIGHT | default(layer_height) | float %}
    {% set filament_diameter = params.FILAMENT_DIAMETER | default(1.75) | float %}
    {% set line_width = params.LINE_WIDTH | default(0.45) | float %}
    {% set material = params.MATERIAL | default("PLA") | upper %}

    G28
    G90
    G1 Z5 F600
    G92 E0

    TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START={start_pa} END={ start_pa + step_pa * (loops - 1) }

    {% set filament_area = 3.14159 * (filament_diameter / 2) ** 2 %}
    {% set flow_per_mm = line_width * layer_height / filament_area %}

    G1 X50 Y50 Z{layer_height} F6000
    G92 E0

    {% for i in range(loops) %}
        {% set current_pa = start_pa + step_pa * i %}
        {% set x0 = 50 + offset * i %}
        {% set y0 = 50 %}
        {% set x1 = x0 + square_size %}
        {% set y1 = y0 + square_size %}
        G1 X{x0} Y{y0} F6000
        G1 X{x1} Y{y0} E{ (x1 - x0) * flow_per_mm } F{ speed * 60 }
        G1 X{x1} Y{y1} E{ (y1 - y0) * flow_per_mm }
        G1 X{x0} Y{y1} E{ (x1 - x0) * flow_per_mm }
        G1 X{x0} Y{y0} E{ (y1 - y0) * flow_per_mm }
    {% endfor %}

    TUNING_TOWER RESET
    G1 Z10 F1000
    G1 X0 Y0 F6000
    M400

    RESPOND PREFIX=🧪 TYPE=command MSG="PA Pattern complete. Visually inspect corners."
    RESPOND PREFIX=🧭 TYPE=command MSG="Enter best PA value via: TEST_PA_PATTERN_STORE BEST=(best_pa)"

[gcode_macro TEST_PA_PATTERN_STORE]
description: Stores chosen PA value from TEST_PA_PATTERN
gcode:
    {% set best = params.BEST | float %}
    {% set material = params.MATERIAL | default("PLA") | upper %}
    {% set nozzle_size = params.NOZZLE_SIZE | default(0.4) | float %}

    SET_PRESSURE_ADVANCE ADVANCE={best}
    SAVE_VARIABLE VARIABLE="pa_{ material }_{ nozzle_size|round(2) }" VALUE="{ pressure_advance|round(4) }"

    RESPOND PREFIX=💾 TYPE=command MSG="Saved and applied PA for { material }: { best }"
    REACTOR_LOG MSG="User saved PA for { material } = { best }"


## -------------------------------------------------------
## Nozzle && Filaments
## -------------------------------------------------------

[gcode_macro NOZZLE_40]
gcode:
    CHANGE_NOZZLE NOZZLE_DIAMETER=0.4

[gcode_macro NOZZLE_60]
gcode:
    CHANGE_NOZZLE NOZZLE_DIAMETER=0.6

## Filaments stored in Filaments.cfg


## -------------------------------------------------------
## UPDATE GITHUB CONFIG
## -------------------------------------------------------

[delayed_gcode _klipper_shutdown_stage_2]
# This delayed G-code macro performs the host machine shutdown actions.
# It is triggered 35 seconds after _klipper_shutdown_stage_1 issues BACKUP_CFG.
initial_duration: 0 # This ensures it only runs when explicitly updated.
gcode:
    {action_respond_info('action:poweroff')}    ; OctoPrint compatible host shutdown
    {action_call_remote_method("shutdown_machine")} ; Moonraker compatible host shutdown

## -------------------------------------------------------

[delayed_gcode _klipper_shutdown_stage_1]
# This delayed G-code macro handles the configuration backup.
# It is triggered 1 second after the OFF macro completes.
initial_duration: 0 # This ensures it only runs when explicitly updated.
gcode:
    # Perform the configuration backup
    BACKUP_CFG
    # Schedule the final power-off stage.
    # This accounts for the 30-second delay from the original SHUTDOWN macro.
    # The duration is set to 30 seconds, meaning the power-off will occur 30 seconds
    # after the BACKUP_CFG command has been issued.
    UPDATE_DELAYED_GCODE ID=_klipper_shutdown_stage_2 DURATION=30

## -------------------------------------------------------

[gcode_shell_command backup_cfg]
command: ~/printer_data/config/autocommit.sh
timeout: 25
verbose: True

## -------------------------------------------------------

[gcode_macro BACKUP_CFG]
description: Backs up config directory GitHub
gcode:
    RUN_SHELL_COMMAND CMD=backup_cfg


#-----------------------------------------------------------------------------
    
[gcode_macro OFF]
gcode:
    M84                                         ; Turn steppers off
    TURN_OFF_HEATERS                            ; Turn bed / hotend off
    M107                                        ; Turn print cooling fan off
    # SET_FAN_SPEED FAN=MCU_fan SPEED=0           ; turn controller fan off
    SET_FAN_SPEED FAN=chamber_filter SPEED=0    ; turn chamber filter fan off
    SET_PIN PIN=caselight VALUE=00            ; turn case light off
    # Schedule the next stage of shutdown (backup) after a short delay (1 second)
    # This replaces the initial G4 P1000 from the original SHUTDOWN macro.
    UPDATE_DELAYED_GCODE ID=_klipper_shutdown_stage_1 DURATION=1
