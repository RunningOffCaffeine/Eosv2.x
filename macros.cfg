# [include extruder-pa.cfg]
[include build-sheets.cfg]
[include filaments.cfg]
[include auto-speed.cfg]
[include TEST_SPEED/test_speed.cfg]
[include CALIBRATION/tuning_macros.cfg]      # Either include this or KAMP_Settings.cfg
[include KAMP_Settings.cfg]                # as it is included in tuning_macros.cfg
# [include led_config_BARF.cfg]


## -------------------------------------------------------
## LEDs
## -------------------------------------------------------


[gcode_macro _STATUS_READY]
gcode:
  SET_LED LED="rgb_light" RED=0.843 GREEN=0.145 BLUE=0.576 WHITE=0 SYNC=0 TRANSMIT=1 INDEX=1
  SET_LED LED="rgb_light" RED=0.843 GREEN=0.145 BLUE=0.576 WHITE=0 SYNC=0 TRANSMIT=1 INDEX=2
  SET_LED LED="rgb_light" RED=0.843 GREEN=0.145 BLUE=0.576 WHITE=0 SYNC=0 TRANSMIT=1 INDEX=3

[gcode_macro _SET_STATUS_READY]
gcode:
    {% if printer['gcode_macro _STATUS_READY'] is defined %}
        RESPOND PREFIX=✨️ TYPE=command MSG="Setting printer status LED to READY"
        _STATUS_READY
    {% endif %}

[delayed_gcode _set_led_to_ready]
initial_duration: 1 # This ensures it runs 1 second after printer bootup
gcode:
    _SET_STATUS_READY


[gcode_macro _STATUS_BUSY]
gcode:
  SET_LED LED="rgb_light" RED=1 GREEN=0.5 BLUE=0 WHITE=0 SYNC=0 TRANSMIT=1 INDEX=1
  SET_LED LED="rgb_light" RED=1 GREEN=0.5 BLUE=0 WHITE=0 SYNC=0 TRANSMIT=1 INDEX=2
  SET_LED LED="rgb_light" RED=1 GREEN=0.5 BLUE=0 WHITE=0 SYNC=0 TRANSMIT=1 INDEX=3
  
[gcode_macro _SET_STATUS_BUSY]
gcode:
    {% if printer['gcode_macro _STATUS_BUSY'] is defined %}
        RESPOND PREFIX=✨️ TYPE=command MSG="Setting printer status LED to BUSY"
        _STATUS_BUSY
    {% endif %}


[gcode_macro _STATUS_HEATING]
gcode:
  SET_LED LED="rgb_light" RED=1 GREEN=0 BLUE=0 WHITE=0 SYNC=0 TRANSMIT=1 INDEX=1
  SET_LED LED="rgb_light" RED=1 GREEN=0 BLUE=0 WHITE=0 SYNC=0 TRANSMIT=1 INDEX=2
  SET_LED LED="rgb_light" RED=1 GREEN=0 BLUE=0 WHITE=0 SYNC=0 TRANSMIT=1 INDEX=3

[gcode_macro _SET_STATUS_HEATING]
gcode:
    {% if printer['gcode_macro _STATUS_HEATING'] is defined %}
        RESPOND PREFIX=✨️ TYPE=command MSG="Setting printer status LED to HEATING"
        _STATUS_HEATING
    {% endif %}


[gcode_macro _STATUS_LEVELING]
gcode:
  SET_LED LED="rgb_light" RED=0.337 GREEN=0.922 BLUE=0.067 WHITE=0 SYNC=0 TRANSMIT=1 INDEX=1
  SET_LED LED="rgb_light" RED=0.337 GREEN=0.922 BLUE=0.067 WHITE=0 SYNC=0 TRANSMIT=1 INDEX=2
  SET_LED LED="rgb_light" RED=0.337 GREEN=0.922 BLUE=0.067 WHITE=0 SYNC=0 TRANSMIT=1 INDEX=3
  
[gcode_macro _SET_STATUS_LEVELING]
gcode:
    {% if printer['gcode_macro _STATUS_LEVELING'] is defined %}
        RESPOND PREFIX=✨️ TYPE=command MSG="Setting printer status LED to LEVELING"
        _STATUS_LEVELING
    {% endif %}


[gcode_macro _STATUS_HOMING]
gcode:
  SET_LED LED="rgb_light" RED=0.604 GREEN=0.922 BLUE=0.063 WHITE=0 SYNC=0 TRANSMIT=1 INDEX=1
  SET_LED LED="rgb_light" RED=0.604 GREEN=0.922 BLUE=0.063 WHITE=0 SYNC=0 TRANSMIT=1 INDEX=2
  SET_LED LED="rgb_light" RED=0.604 GREEN=0.922 BLUE=0.063  WHITE=0 SYNC=0 TRANSMIT=1 INDEX=3

[gcode_macro _SET_STATUS_HOMING]
gcode:
    {% if printer['gcode_macro _STATUS_HOMING'] is defined %}
        RESPOND PREFIX=✨️ TYPE=command MSG="Setting printer status LED to HOMING"
        _STATUS_HOMING
    {% endif %}


[gcode_macro _STATUS_CLEANING]
gcode:
  SET_LED LED="rgb_light" RED=0.063 GREEN=0.722 BLUE=0.922 WHITE=0 SYNC=0 TRANSMIT=1 INDEX=1
  SET_LED LED="rgb_light" RED=1 GREEN=1 BLUE=0 WHITE=1 SYNC=0 TRANSMIT=1 INDEX=2
  SET_LED LED="rgb_light" RED=1 GREEN=1 BLUE=0  WHITE=1 SYNC=0 TRANSMIT=1 INDEX=3

[gcode_macro _SET_STATUS_CLEANING]
gcode:
    {% if printer['gcode_macro _STATUS_CLEANING'] is defined %}
        RESPOND PREFIX=✨️ TYPE=command MSG="Setting printer status LED to CLEANING"
        _STATUS_CLEANING
    {% endif %}


[gcode_macro _STATUS_MESHING]
gcode:
  SET_LED LED="rgb_light" RED=0.89 GREEN=0.612 BLUE=0.059 WHITE=0 SYNC=0 TRANSMIT=1 INDEX=1
  SET_LED LED="rgb_light" RED=1 GREEN=1 BLUE=0 WHITE=1 SYNC=0 TRANSMIT=1 INDEX=2
  SET_LED LED="rgb_light" RED=0 GREEN=0 BLUE=1  WHITE=1 SYNC=0 TRANSMIT=1 INDEX=3

[gcode_macro _SET_STATUS_MESHING]
gcode:
    {% if printer['gcode_macro _STATUS_MESHING'] is defined %}
        RESPOND PREFIX=✨️ TYPE=command MSG="Setting printer status LED to MESHING"
        _STATUS_MESHING
    {% endif %}


[gcode_macro _STATUS_CALIBRATING_Z]
gcode:
  SET_LED LED="rgb_light" RED=0.094 GREEN=0.988 BLUE=0.145 WHITE=0 SYNC=0 TRANSMIT=1 INDEX=1
  SET_LED LED="rgb_light" RED=1 GREEN=1 BLUE=1 WHITE=1 SYNC=0 TRANSMIT=1 INDEX=2
  SET_LED LED="rgb_light" RED=1 GREEN=1 BLUE=1  WHITE=1 SYNC=0 TRANSMIT=1 INDEX=3

[gcode_macro _SET_STATUS_CALIBRATING_Z]
gcode:
    {% if printer['gcode_macro _STATUS_CALIBRATING_Z'] is defined %}
        RESPOND PREFIX=✨️ TYPE=command MSG="Setting printer status LED to CALIBRATING_Z"
        _STATUS_CALIBRATING_Z
    {% endif %}


[gcode_macro _STATUS_PURGING]
gcode:
  SET_LED LED="rgb_light" RED=1 GREEN=0.498 BLUE=0.522 WHITE=0 SYNC=0 TRANSMIT=1 INDEX=1
  SET_LED LED="rgb_light" RED=1 GREEN=1 BLUE=1 WHITE=1 SYNC=0 TRANSMIT=1 INDEX=2
  SET_LED LED="rgb_light" RED=1 GREEN=1 BLUE=1  WHITE=1 SYNC=0 TRANSMIT=1 INDEX=3
  
[gcode_macro _SET_STATUS_PURGING]
gcode:
    {% if printer['gcode_macro _STATUS_PURGING'] is defined %}
        RESPOND PREFIX=✨️ TYPE=command MSG="Setting printer status LED to PURGING"
        _STATUS_PURGING
    {% endif %}


[gcode_macro _STATUS_PRINTING]
gcode:
  SET_LED LED="rgb_light" RED=0.843 GREEN=0.145 BLUE=0.576 WHITE=0 SYNC=0 TRANSMIT=1 INDEX=1
  SET_LED LED="rgb_light" RED=1 GREEN=1 BLUE=1 WHITE=1 SYNC=0 TRANSMIT=1 INDEX=2
  SET_LED LED="rgb_light" RED=1 GREEN=1 BLUE=1  WHITE=1 SYNC=0 TRANSMIT=1 INDEX=3
  
[gcode_macro _SET_STATUS_PRINTING]
gcode:
    {% if printer['gcode_macro _STATUS_PRINTING'] is defined %}
        RESPOND PREFIX=✨️ TYPE=command MSG="Setting printer status LED to PRINTING"
        _STATUS_PRINTING
    {% endif %}


[gcode_macro _STATUS_PAUSE]
gcode:
  SET_LED LED="rgb_light" RED=1 GREEN=0.647 BLUE=0 WHITE=0 SYNC=0 TRANSMIT=1 INDEX=1
  SET_LED LED="rgb_light" RED=1 GREEN=0.647 BLUE=0 WHITE=1 SYNC=0 TRANSMIT=1 INDEX=2
  SET_LED LED="rgb_light" RED=1 GREEN=0.647 BLUE=0  WHITE=1 SYNC=0 TRANSMIT=1 INDEX=3
  
[gcode_macro _SET_STATUS_PAUSE]
gcode:
    {% if printer['gcode_macro _STATUS_PRINTING'] is defined %}
        RESPOND PREFIX=✨️ TYPE=command MSG="Setting printer status LED to PAUSE"
        _STATUS_PAUSE
    {% endif %}


[gcode_macro _STATUS_RESUME]
gcode:
  SET_LED LED="rgb_light" RED=0 GREEN=1 BLUE=0 WHITE=0 SYNC=0 TRANSMIT=1 INDEX=1
  SET_LED LED="rgb_light" RED=0 GREEN=1 BLUE=0 WHITE=1 SYNC=0 TRANSMIT=1 INDEX=2
  SET_LED LED="rgb_light" RED=0 GREEN=1 BLUE=0  WHITE=1 SYNC=0 TRANSMIT=1 INDEX=3
  
[gcode_macro _SET_STATUS_RESUME]
gcode:
    {% if printer['gcode_macro _STATUS_PRINTING'] is defined %}
        RESPOND PREFIX=✨️ TYPE=command MSG="Setting printer status LED to RESUME"
        _STATUS_RESUME
    {% endif %}


[gcode_macro _STATUS_CANCEL]
gcode:
  SET_LED LED="rgb_light" RED=0.953 GREEN=0.125 BLUE=0.075 WHITE=0 SYNC=0 TRANSMIT=1 INDEX=1
  SET_LED LED="rgb_light" RED=0.941 GREEN=0.835 BLUE=0 WHITE=1 SYNC=0 TRANSMIT=1 INDEX=2
  SET_LED LED="rgb_light" RED=0.792 GREEN=0.043 BLUE=0  WHITE=1 SYNC=0 TRANSMIT=1 INDEX=3
  
[gcode_macro _SET_STATUS_CANCEL]
gcode:
    {% if printer['gcode_macro _STATUS_PRINTING'] is defined %}
        RESPOND PREFIX=✨️ TYPE=command MSG="Setting printer status LED to CANCEL"
        _STATUS_CANCEL
    {% endif %}


[gcode_macro _STATUS_OFF]
gcode:
  SET_LED LED="rgb_light" RED=0 GREEN=0 BLUE=0 WHITE=0 SYNC=0 TRANSMIT=1 INDEX=1
  SET_LED LED="rgb_light" RED=0 GREEN=0 BLUE=0 WHITE=0 SYNC=0 TRANSMIT=1 INDEX=2
  SET_LED LED="rgb_light" RED=0 GREEN=0 BLUE=0 WHITE=0 SYNC=0 TRANSMIT=1 INDEX=3

[gcode_macro _HEADLIGHT_ON]
gcode:
  SET_LED LED="rgb_light" RED=1 GREEN=1 BLUE=1 WHITE=1 SYNC=0 TRANSMIT=1 INDEX=2
  SET_LED LED="rgb_light" RED=1 GREEN=1 BLUE=1  WHITE=1 SYNC=0 TRANSMIT=1 INDEX=3

[gcode_macro _HEADLIGHT_OFF]
gcode:
  SET_LED LED="rgb_light" RED=0 GREEN=0 BLUE=0 WHITE=0 SYNC=0 TRANSMIT=1 INDEX=2
  SET_LED LED="rgb_light" RED=0 GREEN=0 BLUE=0 WHITE=0 SYNC=0 TRANSMIT=1 INDEX=3

[gcode_macro _CASELIGHT_OFF]
gcode:
  SET_PIN PIN=caselight VALUE=0.00

[gcode_macro _CASELIGHT_ON]
gcode:
  ; 1. Calculate the initial power value (0.0 to 1.0)
  {% set raw_power = ((params.POWER|default(50)|int) / 100) | float %}
  
  ; 2. Clamp the raw value between a minimum of 0.0 and a maximum of 1.0
  ; First, clamp V to be no more than 1.0
  {% set final_power = [raw_power, 1.0]|min %}
  ; Then, clamp the result to be no less than 0.0
  {% set final_power = [final_power, 0.0]|max %}
  
  SET_PIN PIN=caselight VALUE={final_power}

[gcode_macro _SET_STATUS_OFF]
gcode:
    {% if printer['gcode_macro _STATUS_OFF'] is defined %}
        RESPOND PREFIX=✨️ TYPE=command MSG="Setting printer status LED to OFF"
        _STATUS_OFF
        _HEADLIGHT_OFF
    {% endif %}


## Emits an audible tone, use in conjunction with a passive buzzer to create beeps of different pitch and durations
## Original code from: https://github.com/rootiest/zippy-klipper_config/blob/master/macros/M300.cfg
## Script that converts MIDI files to M300 gcode: https://alexyu132.github.io/midi-m300/
[gcode_macro M300]
gcode:
    {% set S = params.S|default(1000)|int %}  ; S sets the tone frequency (Hz)
    {% set P = params.P|default(100)|int %}   ; P sets the tone duration (ms)
    {% set V = params.V|default(0.5)|float %} ; V sets the volume (PWM duty cycle: 0.0 to 1.0)
    
    ; --- Volume/Duty Cycle Clamping ---
    ; First, clamp V to be no more than 1.0
    {% set L = [V, 0.95]|min %}
    ; Then, clamp the result to be no less than 0.0
    {% set L = [L, 0.0]|max %}
    
    ; --- Frequency Logic ---
    {% if S <= 0 %}            ; Don't divide through zero
        {% set F = 1 %}
        {% set L = 0 %}        ; Set duty cycle to 0 (silent) if S is 0
    {% elif S >= 10000 %}      ; Max frequency set to 10kHz
        {% set F = 0 %}
    {% else %}
        {% set F = 1/S %}      ; Convert frequency (Hz) to cycle time (seconds)
    {% endif %}
    
    SET_PIN PIN=_beeper VALUE={L} CYCLE_TIME={F} ; Play tone with specified volume (L)
    G4 P{P}                                    ; Tone duration (P)
    SET_PIN PIN=_beeper VALUE=0                ; Stop tone


[gcode_macro ERROR_BEEP]
gcode:
    # Retrieve the globally saved volume
    {% set beep_volume = params.V | default(0.5) | float %}

    M300 P12 S262 V{beep_volume}
    M300 P321 S196 V{beep_volume}
    M300 P538 S98 V{beep_volume}

# [gcode_macro COMPLETE_BEEP]
# gcode:
#     {% set VOL = params.V|default(0.5) %} ; Define a variable for clarity, using a default

## -------------------------------------------------------
## OVERRIDES
## -------------------------------------------------------


[gcode_macro M109] # Wait Hotend Temp
rename_existing: M109.1
gcode:
    #Parameters
    {% set s = params.S|float %}

    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  # Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s-2} MAXIMUM={s+5}   # Wait for hotend temp (within n degrees)
    {% endif %}


[gcode_macro M190] # Wait Bed Temp
rename_existing: M190.1
gcode:
    #Parameters
    {% set s = params.S|float %}

    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   # Set bed temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s-1} MAXIMUM={s+5}  # Wait for bed temp (within n degrees)
    {% endif %}


[gcode_macro M191] # Wait Chamber Temp
# rename_existing: M191.1
gcode:
    #Parameters
    {% set s = params.S|float %}

    M141 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   # Set chamber temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR="temperature_sensor Chamber" MINIMUM={s-1} MAXIMUM={s+5}  # Wait for chamber temp (within n degrees)
    {% endif %}

    
[gcode_macro G32]
gcode:
    CHOME
    QUAD_GANTRY_LEVEL {rawparams}


[gcode_macro G29]
gcode:
    CHOME
    MESH_CALIBRATE {rawparams}

    
[gcode_macro G28]
rename_existing: G28.1
gcode:
    {% set RPARAMS = rawparams|upper %}
    {% set home_x = 'X' in RPARAMS %}
    {% set home_y = 'Y' in RPARAMS %}
    {% set home_z = 'Z' in RPARAMS %}

    # If no parameters are given (e.g., a simple G28), home all axes
    {% if not rawparams %}
        {% set home_x = True %}
        {% set home_y = True %}
        {% set home_z = True %}
    {% endif %}
    
    _SET_STATUS_HOMING

    # --- Y-Axis Homing Logic ---
    # Home Y if it was requested, OR if X or Z was requested and Y isn't homed yet.
    # This block runs first, ensuring Y is always homed before X.
    {% if home_y or (home_x and 'y' not in printer.toolhead.homed_axes) or (home_z and 'y' not in printer.toolhead.homed_axes) %}
        G28.1 Y
    {% endif %}

    # --- X-Axis Homing Logic ---
    # Home X if it was requested, OR if Z was requested and X isn't homed yet.
    {% if home_x or (home_z and 'x' not in printer.toolhead.homed_axes) %}
        G28.1 X
    {% endif %}

    # --- Z-Axis Homing Logic ---
    # Home Z only if it was explicitly requested. Its dependencies (X and Y) are handled above.
    {% if home_z %}
        G28.1 Z {rawparams}
    {% endif %}

    _SET_STATUS_READY
  

[gcode_macro QUAD_GANTRY_LEVEL]
# Rename the existing command so we can call it BASE_QGL
rename_existing: BASE_QGL 
gcode:
    _SET_STATUS_HOMING
    CG28
    
    _SET_STATUS_LEVELING
    BASE_QGL {rawparams}
    
    _SET_STATUS_HOMING
    G28 Z           ; Re-home Z after QGL adjustments
    _SET_STATUS_READY


# [gcode_macro AWD_BED_MESH_CALIBRATE]
# gcode:
#     BED_MESH_CLEAR
    
#     # Define a temporary profile for the exclusion logic
#     # This prevents conflicts with KAMP or other dynamic meshing
#     BED_MESH_CALIBRATE PROFILE=EXCLUSION_PROFILE
    
#     # 1. Front-Left Corner Exclusion (0,0) to (50, 50)
#     PROBE_FINESSE MIN_X=0 MAX_X=50 MIN_Y=0 MAX_Y=50 SKIP=1
    
#     # 2. Front-Right Corner Exclusion (Mirrors Front-Left)
#     # This excludes the area from X=300 to X=350, and Y=0 to Y=50.
#     PROBE_FINESSE MIN_X=300 MAX_X=350 MIN_Y=0 MAX_Y=50 SKIP=1
    
#     # 3. Run the actual calibration with the exclusion points skipped
#     BED_MESH_CALIBRATE PROFILE=EXCLUSION_PROFILE

[gcode_macro MESH_CALIBRATE]
gcode:
    _SET_STATUS_MESHING
    BED_MESH_CALIBRATE ADAPTIVE=1 {rawparams} # USE_CONTACT_AREA=1
    _SET_STATUS_READY


[gcode_macro T0]
gcode:


## -------------------------------------------------------
## PRINT START & END
## -------------------------------------------------------

[gcode_macro _SOAK_VARS]
variable_is_soaking: False
variable_soak_time_remaining: 0
variable_extruder_temp: 0
gcode:
  # This macro is for variable storage only

[delayed_gcode _SOAK_TIMER]
initial_duration: 0
gcode:
    _SOAK_ITERATION

[delayed_gcode _SOAK_POLLING_TIMER]
gcode:
    _WAIT_FOR_SOAK_LOOP

[gcode_macro _WAIT_FOR_SOAK_LOOP]
gcode:
    {% if printer['gcode_macro _SOAK_VARS'].is_soaking %}
        M117 Waiting for heatsoak... {printer['gcode_macro _SOAK_VARS'].soak_time_remaining // 60}m remaining
        # Pause G-code stream for 5 seconds, then run the helper timer
        SYNC_DELAYED_GCODE ID=_SOAK_POLLING_TIMER DURATION=5
    {% else %}
        M117 Heatsoak finished. Resuming startup.
    {% endif %}

[gcode_macro _SOAK_ITERATION]
description: Non-blocking heatsoak timer loop. Do not call directly.
gcode:
    {% set soak_vars = printer['gcode_macro _SOAK_VARS'] %}

    {% if soak_vars.is_soaking %}
        {% if soak_vars.soak_time_remaining > 0 %}
            # If time is left, show status and schedule the next iteration
            {% set minutes_left = (soak_vars.soak_time_remaining / 60) | round(1) %}
            M117 Heatsoaking... {minutes_left} min left.
            SET_GCODE_VARIABLE MACRO=_SOAK_VARS VARIABLE=soak_time_remaining VALUE={soak_vars.soak_time_remaining - 30}
            UPDATE_DELAYED_GCODE ID=_SOAK_TIMER DURATION=30
        {% else %}
            # If time is up, end the soak and continue with the print
            M117 Heatsoak complete.
            SET_GCODE_VARIABLE MACRO=_SOAK_VARS VARIABLE=is_soaking VALUE=False
            _POST_SOAK_SETUP # Call the next stage of the startup sequence
        {% endif %}
    {% endif %}

[gcode_macro HEATSOAK]
description: Non-blocking heatsoak. BED=105 CHAMBER=40 DURATION=15 (minutes)
gcode:
    {% set BED_TEMP = params.BED|default(105)|float %}
    {% set CHAMBER_TEMP = params.CHAMBER|default(0)|float %}
    {% set DURATION = params.DURATION|default(15)|int %}
    
    # Set global state variables to start the soak
    SET_GCODE_VARIABLE MACRO=_SOAK_VARS VARIABLE=is_soaking VALUE=True
    SET_GCODE_VARIABLE MACRO=_SOAK_VARS VARIABLE=soak_time_remaining VALUE={DURATION * 60}

    # Heat bed and wait for it to reach temperature
    M117 Heating bed to {BED_TEMP}°C...
    M190 S{BED_TEMP}
    
    # Park the toolhead for soaking
    CG28
    SMART_PARK

    # If a chamber temp is set, wait for it first
    {% if CHAMBER_TEMP > 0 %}
        M117 Waiting for chamber to reach {CHAMBER_TEMP}°C...
        TEMPERATURE_WAIT SENSOR="temperature_sensor Chamber" MINIMUM={CHAMBER_TEMP}
    {% endif %}

    # Start the non-blocking timer loop
    RESPOND PREFIX=🌡️ MSG="Starting interruptible heatsoak for {DURATION} minutes."
    _SOAK_ITERATION


[gcode_macro PHASE_1]
description: Sets profiles, heats, and homes the printer.
gcode:
    _SET_STATUS_READY

    # --- Get all slicer parameters ---
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(210)|float %}
    {% set CHAMBER_TEMP = params.CHAMBER_TEMP|default(0)|float %}
    {% set HEATSOAK_ENABLED = params.HEATSOAK_ENABLED|default(1)|int %}
    {% set MATERIAL = params.MATERIAL|default("PLA")|upper %}
    {% set NOZZLE_SIZE = params.NOZZLE_SIZE|default(0.4)|float %}
    {% set LAYER_HEIGHT = params.LAYER_HEIGHT|default(0.2)|float %}
    # {% set LINE_WIDTH = params.LINE_WIDTH|default(NOZZLE_SIZE * 1.25)|float %}
    {% set PRINT_SPEED = params.PRINT_SPEED|default(60)|float %}
    {% set TUBE_LENGTH = params.TUBE_LENGTH|default(0.5)|float %}

    # --- NOZZLE SIZE VERIFICATION ---
    {% set KLIPPER_NOZZLE = printer.extruder.nozzle_diameter %}
    {% if (NOZZLE_SIZE - KLIPPER_NOZZLE)|abs > 0.01 %}
        {action_raise_error("Nozzle size mismatch! Slicer: %.2fmm, Printer: %.2fmm." % (NOZZLE_SIZE, KLIPPER_NOZZLE))}
    {% endif %}

    SET_GCODE_VARIABLE MACRO=_SOAK_VARS VARIABLE=extruder_temp VALUE={EXTRUDER_TEMP}

    # --- Set initial printer state & filament profiles ---
    M117 Setting material profiles...
    SET_GCODE_OFFSET Z=0 MOVE=1

    # Quick M104 switch so MPC gets set properly
    M104 S{EXTRUDER_TEMP}
    _SET_MPC_MATERIAL MATERIAL={MATERIAL}
    M104 S0
    
    _SET_FIRMWARE_RETRACTION MATERIAL={MATERIAL}

    # --- Pressure Advance Calculation ---
    # _SET_PA_PROFILE {rawparams}
    _CALCULATE_PA MATERIAL={MATERIAL} NOZZLE_SIZE={NOZZLE_SIZE} LAYER_HEIGHT={LAYER_HEIGHT} PRINT_SPEED={PRINT_SPEED} TUBE_LENGTH={TUBE_LENGTH} # LINE_WIDTH={LINE_WIDTH}

    # --- Heating and Homing ---
    BED_MESH_CLEAR
    M117 Heating bed and pre-heating nozzle...

    # --- Heating Logic ---
    _SET_STATUS_HEATING
    M104 S150 # Heat nozzle minimally to run fan for better chamber heating
    SMART_PARK
  
    {% if HEATSOAK_ENABLED == 1 %}
      {% if MATERIAL in ["ABS", "ASA", "PC"] %}
          # For high-temp materials, default to a 40C chamber soak
          {% set TARGET_CHAMBER = CHAMBER_TEMP if CHAMBER_TEMP > 0 else 40 %}
          RESPOND PREFIX=✨️ TYPE=command MSG="DEBUG: CHAMBER TEMP SOAK SEQUENCE"
          HEATSOAK BED={BED_TEMP} CHAMBER={TARGET_CHAMBER} DURATION=15
      {% else %}
          # For all other materials (like PETG), just soak the bed
          RESPOND PREFIX=✨️ TYPE=command MSG="DEBUG: 15 MIN SOAK SEQUENCE"
          HEATSOAK BED={BED_TEMP} DURATION=15
      {% endif %}
    {% else %}
        # If heatsoak is disabled, just heat the bed without a timed delay
        RESPOND PREFIX=✨️ TYPE=command MSG="DEBUG: SKIP SOAK SEQUENCE"
        M117 Heatsoak skipped. Heating bed to {BED_TEMP}C...
        M190 S{BED_TEMP}
    {% endif %}

    M117 Heating nozzle...
    {% if sheet and sheet.name | lower == 'smooth pei' %}
        {action_respond_info("Smooth PEI sheet detected. Heating nozzle to 150°C for probing.")}
        M109 S150
    {% else %}
        {action_respond_info("Textured or other sheet detected. Heating nozzle to full temp for probing.")}
        M109 S{EXTRUDER_TEMP}
    {% endif %}


[gcode_macro _POST_SOAK_SETUP]
description: Heats nozzle and homes. Called automatically after heatsoak.
gcode:
    # --- RETRIEVE THE SAVED EXTRUDER TEMP ---
    {% set EXTRUDER_TEMP = printer['gcode_macro _SOAK_VARS'].extruder_temp | float %}

    # --- HEAT NOZZLE AND HOME ---
    M117 Heating nozzle for probing...
    {% if sheet and sheet.name | lower == 'smooth pei' %}
        M109 S150
        G4 P10000
    {% else %}
        M109 S{EXTRUDER_TEMP}
        G4 P10000
    {% endif %}

    _SET_STATUS_HOMING
    CG28
    G28 Z METHOD=proximity CALIBRATE=0


[gcode_macro PHASE_2]
description: Runs QGL and creates the bed mesh.
gcode:
    _WAIT_FOR_SOAK_LOOP

    M117 Calibrating...
    _SET_STATUS_CALIBRATING_Z
    G28 Z METHOD=CONTACT CALIBRATE=1  ; Calibrate Z offset and Beacon model (will be hot)

    _SET_STATUS_LEVELING
    QUAD_GANTRY_LEVEL

    _SET_STATUS_MESHING
    MESH_CALIBRATE RUNS=2

    _SET_STATUS_CALIBRATING_Z
    G28 Z METHOD=CONTACT CALIBRATE=1  ; Re-check Z


[gcode_macro PHASE_3]
description: Heats nozzle to final temp and runs the purge line.
gcode:
    # Get Slicer Params
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(210)|float %}

    _WAIT_FOR_SOAK_LOOP

    _SET_STATUS_HEATING
    M117 Final heating and purging...
    M109 S{EXTRUDER_TEMP}
    
    {% if sheet and sheet.name | lower == 'smooth pei' %}
        {action_respond_info("Smooth PEI sheet detected. Expanding offset to account for thermal expansion.")}
        {% set OFFSET = 0.08  %}
    {% else %}
        {action_respond_info("Textured or other sheet detected. Probed at temp, applying small squish offset.")}
        {% set OFFSET = 0.02  %}
    {% endif %}

    SET_GCODE_OFFSET Z=0
    RESET_BUILD_SHEET_OFFSET
    SET_GCODE_OFFSET Z={OFFSET} MOVE=1

    _SET_STATUS_PURGING
    VORON_PURGE

    _SET_STATUS_PRINTING
    M117 Print starting!


[gcode_macro PRINT_END]
gcode:
    END_PRINT {rawparams}

    
[gcode_macro END_PRINT]
gcode:
    # Move nozzle away from print while retracting
    G91
    G1 Z5 E-2 F800
    G1 E2 F800 ;Extrude slightly 
    G1 E-18 F800
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    # Park nozzle
    PARK Z={printer.toolhead.position.z + 10}
    G90
    # # Disable steppers
    # M84

    _SET_STATUS_OFF


[gcode_macro RESUME]
rename_existing: RESUME_BASE
variable_zhop: 0
variable_etemp: 0
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set m600_state = svv.m600_state|default('') %}
    {% set m600_tool_index = svv.m600_tool_index|default(0)|int %}
    
    # --- Check for M600 Filament Change State ---
    {% if m600_state == 'loading' %}
        SAVE_VARIABLE VARIABLE=m600_state VALUE="'purging'"
        _INTERNAL_LOAD_FILAMENT TOOL_INDEX={m600_tool_index}
        M117 Purge complete. Click RESUME again to continue.
    
    {% elif m600_state == 'purging' %}
        SAVE_VARIABLE VARIABLE=m600_state VALUE="''"
        RESTORE_GCODE_STATE NAME=M600_state MOVE=1
        M117 Print Resuming...
        RESUME_BASE
    
    # --- Fallback to Standard Pause/Resume Logic ---
    {% elif printer['pause_resume'].is_paused|int == 1 %}
        # Parameters
        {% set e = params.E|default(2.5)|int %}
    
        _SET_STATUS_PRINTING
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
        {% if etemp > 0 %}
            M109 S{etemp|int}
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
        G91
        M83
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900
        {% else %}
            G1 Z{zhop * -1} F900
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
        RESUME_BASE
    
    {% endif %}

    
[gcode_macro PAUSE]
rename_existing: PAUSE_BASE
gcode:
    {% if printer['gcode_macro _SOAK_VARS'].is_soaking %}
        RESPOND TYPE=command MSG="Heatsoak paused."
        # Set is_soaking to false to stop the loop
        SET_GCODE_VARIABLE MACRO=_SOAK_VARS VARIABLE=is_soaking VALUE=False
        # Cancel any scheduled timer events
        UPDATE_DELAYED_GCODE ID=_SOAK_TIMER DURATION=0
    {% endif %}

    _SET_STATUS_PAUSE
    
    # --- Get filament temperature and tool index ---
    _FILAMENTS_ASSERT_FILAMENT_SET
    {% set svv = printer.save_variables.variables %}
    {% set filament = svv.get(svv.get("filament_installed_t0")) %}

    # Parameters
    {% set z = params.Z|default(10)|int %} ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
        # Save the extruder temperature from the filament profile
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={filament.extruder} 

        SAVE_GCODE_STATE NAME=PAUSE
        PAUSE_BASE
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
            G91
            G1 Z{z} F900
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90
        FRONT
        SAVE_GCODE_STATE NAME=PAUSEPARK
        M104 S0
        SET_IDLE_TIMEOUT TIMEOUT=43200
    {% endif %}
    
    PAUSE_BASE {rawparams}


[gcode_macro CANCEL_PRINT]
rename_existing: CANCEL_PRINT_BASE
gcode:
    _SET_STATUS_CANCEL
    {% if printer['gcode_macro _SOAK_VARS'].is_soaking %}
        RESPOND TYPE=command MSG="Heatsoak cancelled."
        SET_GCODE_VARIABLE MACRO=_SOAK_VARS VARIABLE=is_soaking VALUE=False
        UPDATE_DELAYED_GCODE ID=_SOAK_TIMER DURATION=0
    {% endif %}

    INTERRUPT_HEATER

    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
    CLEAR_PAUSE
    
    # Run the PRINT_END macro, which handles parking and turning off heaters/fans.
    PRINT_END
    
    # Call the original Klipper command to cancel the print job.
    CANCEL_PRINT_BASE {rawparams}
    
    # Signal the error with a sound.
    ERROR_BEEP VOL=0.33


[gcode_macro INTERRUPT_HEATER]
gcode:
    HEATER_INTERRUPT

## -------------------------------------------------------
## MOVEMENT MACROS
## -------------------------------------------------------

[gcode_macro FRONT]
description: Move toolhead to the front-center of the bed
gcode:
    {% set x_center = printer.toolhead.axis_maximum.x / 2 %}
    {% set y_front = printer.toolhead.axis_minimum.y + 10 %}
    G90
    G0 X{x_center} Y{y_front} F{6000}

[gcode_macro CENTER]
description: Move toolhead to the absolute center of the bed
gcode:
    {% set x_center = printer.toolhead.axis_maximum.x / 2 %}
    {% set y_center = printer.toolhead.axis_maximum.y / 2 %}
    G90
    G0 X{x_center} Y{y_center} F{6000}

[gcode_macro REAR]
description: Move toolhead to the rear-center of the bed
gcode:
    {% set x_center = printer.toolhead.axis_maximum.x / 2 %}
    {% set y_rear = printer.toolhead.axis_maximum.y - 10 %}
    G90
    G0 X{x_center} Y{y_rear} F{6000}

[gcode_macro PARK]
description: Park the toolhead at a specified or default location.
gcode:
    # --- Get live printer dimensions and speeds ---
    {% set z_max = printer.toolhead.axis_maximum.z %}
    {% set z_pos = printer.toolhead.position.z %}
    {% set y_max = printer.toolhead.axis_maximum.y %}
    {% set x_max = printer.toolhead.axis_maximum.x %}
    {% set travel_speed = printer.toolhead.max_velocity * 60 * 0.5 %} # * 60 converts from mm/sec to mm/min
    {% set z_travel_speed = printer.configfile.settings.printer.max_z_velocity * 60 * 0.75 %} # * 60 converts from mm/sec to mm/min
    
    # --- Define default park height ---
    {% set park_height = (z_max * 0.65)|int %}

    # --- Set park coordinates from parameters or defaults ---
    # The default park position is the back-right corner.
    {% set x_park = params.X|default(x_max - 5) %}
    {% set y_park = params.Y|default(y_max - 5) %}
    {% set z_park = (params.Z|default(park_height))|float %}
    
    # --- Save current G-Code state ---
    SAVE_GCODE_STATE NAME=PARK_STATE
    
    # --- Move Z axis to a safe height ---
    G90 ; Use absolute coordinates
    {% if z_pos < z_park %}
        G1 Z{z_park} F{z_travel_speed} ; Move up to park height
    {% endif %}
    
    # --- Move X and Y axes to park position ---
    G1 X{x_park} Y{y_park} F{travel_speed}
    
    # --- Restore G-Code state ---
    RESTORE_GCODE_STATE NAME=PARK_STATE

[gcode_macro PARK_FOR_SERVICE]
description: Move toolhead to the front-center of the bed at Z=150 for service
gcode:
    {% set x_center = printer.toolhead.axis_maximum.x / 2 %}
    {% set y_front = printer.toolhead.axis_minimum.y + 5 %}
    {% set z_height = printer.toolhead.axis_maximum.z - 30 %}
    PARK X={x_center} Y={y_min} Z={z_max}
    
# [gcode_macro PRESENT]
# description: Presents the print on a CoreXY by moving the toolhead to the front-center.
# gcode:
#     # --- Get printer axis limits ---
#     {% set x_max = printer.toolhead.axis_maximum.x %}
#     {% set y_min = printer.toolhead.axis_minimum.y %}
#     {% set z_max = printer.toolhead.axis_maximum.z %}
    
#     # --- Calculate center of X-axis ---
#     {% set x_center = x_max / 2 %}
    
#     # --- Call the PARK macro to move the toolhead ---
#     # Moves to the front of the Y-axis and the center of the X-axis.
#     PARK X={x_center} Y={y_min + 5} Z={z_max - 30}


## -------------------------------------------------------
## CONDITIONAL MACROS
## -------------------------------------------------------

[gcode_macro CHOME]
gcode: 
    CG28

[gcode_macro CG28]
description: Homes the printer if it has not been homed yet.
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}


## -------------------------------------------------------
## UPDATE MACROS
## -------------------------------------------------------

[gcode_macro _SET_MPC_MATERIAL]
description: Set heater MPC parameters for a given material, interpolating heat capacity based on target temperature.
variable_filament_table:
    ## This table stores material properties.
    ## 'density' is the filament density in g/cm^3.
    ## 'heat_capacity_map' is a list of (temperature, heat_capacity) points.
    ## The macro will interpolate between these points to find the correct value.
    ## For materials with a single value, just provide one point like (0, value).
    {
        # PLA: Note the significant spike around its glass transition temperature (Tg ~65°C).
        "PLA": { "density": 1.25, "heat_capacity_map": [ (25, 1.80),
                                                        (60, 1.95),
                                                        (70, 2.50),  # Peak at Tg
                                                        (150, 2.20),
                                                        (210, 2.30) ] },
                                                        
        # PETG: Shows a steady increase in heat capacity with temperature.
        "PETG": { "density": 1.27, "heat_capacity_map": [ (60, 1.30),
                                                         (100, 1.76),
                                                         (150, 1.88),
                                                         (200, 1.97),
                                                         (250, 2.05) ] },
                                                         
        # ABS: Gradual increase in heat capacity.
        "ABS": { "density": 1.08, "heat_capacity_map": [ (25, 1.60),
                                                        (100, 1.85), # Near Tg
                                                        (200, 2.05),
                                                        (250, 2.15) ] },
                                                        

        # ASA: Very similar properties to ABS.
        "ASA": { "density": 1.09, "heat_capacity_map": [ (25, 1.50),
                                                        (100, 1.75), # Near Tg
                                                        (200, 1.95),
                                                        (250, 2.10) ] },
    }
    
gcode:
    {% set ns = namespace(heat_capacity=0) %}
    {% set material = params.MATERIAL | upper %}
    {% set heater = params.HEATER | default('extruder') %}
    
    {% if material in filament_table %}
        {% set target_temp = printer[heater].target | float %}
        {% set mat_data = filament_table[material] %}
        {% set density = mat_data.density %}
        {% set hc_map = mat_data.heat_capacity_map %}

        # --- Determine heat capacity based on target temperature ---
        
        # Handle single-point maps or temps outside the defined range by clamping to the nearest end-point
        {% if (hc_map | length) == 1 %}
            {% set ns.heat_capacity = hc_map[0][1] %}
        {% elif target_temp <= hc_map[0][0] %}
            {% set ns.heat_capacity = hc_map[0][1] %}
        {% elif target_temp >= hc_map[-1][0] %}
            {% set ns.heat_capacity = hc_map[-1][1] %}
        {% else %}
            # Perform linear interpolation for temps between points
            {% for i in range(hc_map | length - 1) %}
                {% set p1_temp, p1_hc = hc_map[i] %}
                {% set p2_temp, p2_hc = hc_map[i+1] %}

                {% if target_temp >= p1_temp and target_temp < p2_temp %}
                    # Interpolation formula: y = y1 + (x - x1) * (y2 - y1) / (x2 - x1)
                    {% set ns.heat_capacity = p1_hc + (target_temp - p1_temp) * (p2_hc - p1_hc) / (p2_temp - p1_temp) %}
                    {% break %}
                {% endif %}
            {% endfor %}
        {% endif %}

        RESPOND PREFIX=🔥 MSG="Configured {heater} MPC for {material} at {target_temp}°C. Density: {density}, Calculated Heat Capacity: {ns.heat_capacity | round(3)}"
        MPC_SET HEATER={heater} FILAMENT_DENSITY={density} FILAMENT_HEAT_CAPACITY={ns.heat_capacity}

    {% else %}
        # Fallback for unknown materials
        {% set extruder_config = printer.configfile.settings[heater] %}
        {% set density = extruder_config.filament_density %}
        {% set heat_capacity = extruder_config.filament_heat_capacity %}

        RESPOND PREFIX=⚠️🔥 MSG="Unknown material '{material}', using default MPC parameters for {heater}"
        MPC_SET HEATER={heater} FILAMENT_DENSITY={density} FILAMENT_HEAT_CAPACITY={heat_capacity}
    {% endif %}


[gcode_macro _FILAMENT_VARS]
variable_filament_table:
# The format for each entry is:
# "MATERIAL_NAME": (retract_length, retract_speed, unretract_extra_length, unretract_speed)
  {
    # --- Base Filaments ---
    "PLA":      (0.5, 30, 0, 20),
    "PETG":     (0.5, 45, 0, 30),
    "ASA":      (0.3, 30, 0, 20),
    "ABS":      (0.2, 30, 0, 20),
    "TPU":      (0.8, 20, 0, 10),
    "NYLON":    (0.8, 30, 0, 20),
    "PC":       (0.5, 45, 0, 30),
  }
gcode: # Variable storage only

[gcode_macro _MATERIAL_VARS]
variable_pa_constants:
# The format for each entry is:
# "MATERIAL_NAME": (K-factor [constant])
  {
    "PLA":      (85),
    "PETG":     (100),
    "COPE":     (85),
    "ABS":      (95),
    "TPU":      (140),
    "NYLON":    (120),
    "ASA":      (100),
    "PVB":      (85),
    "PA":       (120),
    "FLEX":     (140),
  }
gcode: # This macro is for variable storage only


[gcode_macro _SET_FIRMWARE_RETRACTION]
description: Set printer retract parameters for given materials
gcode:
  {% set filament_table = printer['gcode_macro _FILAMENT_VARS'].filament_table %}
  {% set input_material = params.MATERIAL | default('PLA') | upper %}

  # --- Find a valid lookup key ---
  # First, check for an exact match
  {% set lookup_key = input_material %}
  # If no exact match, and the material name contains an underscore, use the base
  {% if lookup_key not in filament_table and '_' in input_material %}
    {% set lookup_key = input_material.split('_')[0] %}
  {% endif %}
  
  # --- Apply the found settings ---
  {% if lookup_key in filament_table %}
    # Retrieve the settings from the table.
    {% set R_LENGTH, R_SPEED, U_EXTRA, U_SPEED = filament_table[lookup_key] %}

    # Send a message to the console confirming the change.
    RESPOND PREFIX=⬆️ TYPE=command MSG="Setting firmware retraction for {input_material}. Using settings for '{lookup_key}'. Retract Length: {R_LENGTH} Retract Speed: {R_SPEED} Load Length: {U_EXTRA} Load Speed: {U_SPEED}"

    # Apply the new retraction settings.
    SET_RETRACTION RETRACT_LENGTH={R_LENGTH} RETRACT_SPEED={R_SPEED} UNRETRACT_EXTRA_LENGTH={U_EXTRA} UNRETRACT_SPEED={U_SPEED}

  {% else %}
    # If the material is not found, raise an error.
    { action_raise_error("Unknown material: '" ~ input_material ~ "'. Please add it to the _SET_FIRMWARE_RETRACTION macro table.") }
  {% endif %}


[gcode_macro _CALCULATE_PA]
description: Calculates and sets Linear Pressure Advance for set filaments and speeds.
gcode:
    {% set filament_table = printer['gcode_macro _FILAMENT_VARS'].filament_table %}
    {% set pa_constants = printer['gcode_macro _MATERIAL_VARS'].pa_constants %}
    {% set input_material = params.MATERIAL | default("PLA") | upper %}
    {% set nozzle_size = params.NOZZLE_SIZE | default(0.4) | float %}
    {% set layer_height = params.LAYER_HEIGHT | default(0.2) | float %}
    {% set print_speed = params.PRINT_SPEED | default(60) | float %}
    {% set filament_diameter = params.FILAMENT_DIAMETER | default(1.75) | float %}
    
    # --- Find a valid lookup key (for both tables) ---
    {% set lookup_key = input_material %}
    {% if lookup_key not in pa_constants and '_' in input_material %}
      {% set lookup_key = input_material.split('_')[0] %}
    {% endif %}

    # --- Calculation using the constant from the lookup table ---
    {% if lookup_key in pa_constants and lookup_key in filament_table %}
        {% set R_LENGTH, R_SPEED, U_EXTRA, U_SPEED = filament_table[lookup_key] %}
        {% set pa_constant = pa_constants[lookup_key] %}
        
        {% set filament_area = (3.14159 * (filament_diameter / 2) ** 2) %}
        {% set flow_rate = params.LINE_WIDTH|default(nozzle_size * 1.25)|float * layer_height * print_speed %}
        
        ; --- The corrected calculation using the material-specific constant ---
        {% set pressure_advance = (((flow_rate * (R_LENGTH / R_SPEED)) / (pa_constant * filament_area)) * 100 ) %}
        
        SET_PRESSURE_ADVANCE ADVANCE={pressure_advance|round(12)}
        
        RESPOND TYPE=command MSG="⬇️ Calculated PA for {input_material} using '{lookup_key}' constant: {pressure_advance|round(4)}"
    {% else %}
        RESPOND TYPE=command MSG="⚠️ Unknown material '{input_material}' for PA calculation. Using printer default."
    {% endif %}


# [gcode_macro _CALCULATE_NL_PA]
# description: Tries to set Kalico NLPA; falls back to Linear PA if no profile exists.
# gcode:
#     {% set material = params.MATERIAL | default("PLA") | upper %}
#     {% set nozzle_size = params.NOZZLE_SIZE | default(0.4) | float %}
#     {% set nozzle_key = "%.1f" | format(nozzle_size) %}

    # # --- Kalico Nonlinear PA Profiles ---
    # # ❗ IMPORTANT: You must manually tune these values for your printer!
    # # The values below are placeholders for demonstration purposes only.
    # # Format: 'MATERIAL': { 'NOZZLE_SIZE': {'advance': A, 'offset': O, 'velocity': V, 'time_offset': T} }
    # {% set pa_profiles = {
    #     'PLA': {
    #         # '0.4': {'advance': 0.035, 'offset': 0.050, 'velocity': 1, 'time_offset': 0.015},
    #     },
    #     'PETG': {
    #         # '0.4': {'advance': 0.05450, 'offset': 0.286, 'velocity': 1, 'time_offset': 0.020},
    #     },
    #     'ABS': {
    #         # '0.4': {'advance': 0.030, 'offset': 0.045, 'velocity': 1, 'time_offset': 0.010}
    #     },
    #     'ASA': {
    #         # '0.4': {'advance': 0.040, 'offset': 0.060, 'velocity': 1, 'time_offset': 0.015}
    #     }
    # } %}

    # {% if material in pa_profiles and nozzle_key in pa_profiles[material] %}
    #     # --- Profile Found: Set NLPA values ---
    #     {% set profile = pa_profiles[material][nozzle_key] %}
    #     SET_PRESSURE_ADVANCE ADVANCE={profile.advance} OFFSET={profile.offset} VELOCITY={profile.velocity} TIME_OFFSET={profile.time_offset}
    #     RESPOND TYPE=command MSG="⬇️ Set Kalico PA for {material} @ {nozzle_key}mm: A={profile.advance} O={profile.offset} T={profile.time_offset}"
    # {% else %}
        # --- ❗ CHANGED PART: Fallback Logic ---
        # Profile not found, so we print a message and call the linear PA calculator.
        # RESPOND TYPE=command MSG="⚠️ No Kalico PA profile for {material} @ {nozzle_key}mm. Falling back to Linear PA."
        # _CALCULATE_PA {rawparams}
    # {% endif %}


# [gcode_macro _SET_PA_PROFILE]
# description: Master macro to set PA. Tries Kalico NLPA first, falls back to Linear PA.
# gcode:
#     # This macro acts as a dispatcher. It calls the NLPA macro,
#     # which contains the fallback logic within its 'else' block.
#     # We pass all slicer params using {rawparams} for simplicity.
#     # _CALCULATE_NL_PA {rawparams}
#     _CALCULATE_PA {rawparams}


# [gcode_macro SHOW_SAVED_PA]
# description: Show all saved Pressure Advance values for materials and nozzle sizes.
# gcode:
#     {% set svv = printer.save_variables.variables %}
#     RESPOND TYPE=command MSG="📦 Saved Pressure Advance values:"
#     {% for key, value in svv.items() %}
#         {% if key.startswith('pa_') %}
#             {% set parts = key.split('_') %}
#             {% set mat = parts[1] %}
#             {% set noz = parts[2] %}
#             RESPOND TYPE=command MSG="• { mat } @ { noz }mm → PA = { value }"
#         {% endif %}
#     {% endfor %}


[gcode_macro TEST_PA_PATTERN]
description: Print Ellis-style corner test and interactively save Pressure Advance
variable_best_pa: 0.0
gcode:
    {% set start_pa = params.START | default(0) | float %}
    {% set step_pa = params.STEP | default(0.01) | float %}
    {% set loops = params.LOOPS | default(5) | int %}
    {% set square_size = params.SIZE | default(40) | float %}
    {% set offset = params.OFFSET | default(5) | float %}
    {% set speed = params.SPEED | default(60) | float %}
    {% set layer_height = params.LAYER_HEIGHT | default(0.2) | float %}
    {% set height = params.HEIGHT | default(layer_height) | float %}
    {% set filament_diameter = params.FILAMENT_DIAMETER | default(1.75) | float %}
    {% set line_width = params.LINE_WIDTH | default(0.45) | float %}
    {% set material = params.MATERIAL | default("PLA") | upper %}

    G28
    G90
    G1 Z5 F600
    G92 E0

    TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START={start_pa} END={ start_pa + step_pa * (loops - 1) }

    {% set filament_area = 3.14159 * (filament_diameter / 2) ** 2 %}
    {% set flow_per_mm = line_width * layer_height / filament_area %}

    G1 X50 Y50 Z{layer_height} F6000
    G92 E0

    {% for i in range(loops) %}
        {% set current_pa = start_pa + step_pa * i %}
        {% set x0 = 50 + offset * i %}
        {% set y0 = 50 %}
        {% set x1 = x0 + square_size %}
        {% set y1 = y0 + square_size %}
        G1 X{x0} Y{y0} F6000
        G1 X{x1} Y{y0} E{ (x1 - x0) * flow_per_mm } F{ speed * 60 }
        G1 X{x1} Y{y1} E{ (y1 - y0) * flow_per_mm }
        G1 X{x0} Y{y1} E{ (x1 - x0) * flow_per_mm }
        G1 X{x0} Y{y0} E{ (y1 - y0) * flow_per_mm }
    {% endfor %}

    TUNING_TOWER RESET
    G1 Z10 F1000
    G1 X0 Y0 F6000
    M400

    RESPOND PREFIX=🧪 TYPE=command MSG="PA Pattern complete. Visually inspect corners."
    RESPOND PREFIX=🧭 TYPE=command MSG="Enter best PA value via: TEST_PA_PATTERN_STORE BEST=(best_pa)"

[gcode_macro TEST_PA_PATTERN_STORE]
description: Stores chosen PA value from TEST_PA_PATTERN
gcode:
    {% set best = params.BEST | float %}
    {% set material = params.MATERIAL | default("PLA") | upper %}
    {% set nozzle_size = params.NOZZLE_SIZE | default(0.4) | float %}

    SET_PRESSURE_ADVANCE ADVANCE={best}
    SAVE_VARIABLE VARIABLE="pa_{ material }_{ nozzle_size|round(2) }" VALUE="{ pressure_advance|round(4) }"

    RESPOND PREFIX=💾 TYPE=command MSG="Saved and applied PA for { material }: { best }"
    REACTOR_LOG MSG="User saved PA for { material } = { best }"


## -------------------------------------------------------
## Nozzle && Filaments
## -------------------------------------------------------

[gcode_macro NOZZLE_40]
gcode:
    CHANGE_NOZZLE NOZZLE_DIAMETER=0.4

[gcode_macro NOZZLE_60]
gcode:
    CHANGE_NOZZLE NOZZLE_DIAMETER=0.6

## Filaments stored in Filaments.cfg


## -------------------------------------------------------
## UPDATE GITHUB CONFIG
## -------------------------------------------------------

[delayed_gcode _klipper_shutdown_stage_2]
# This delayed G-code macro performs the host machine shutdown actions.
# It is triggered 35 seconds after _klipper_shutdown_stage_1 issues BACKUP_CFG.
initial_duration: 0 # This ensures it only runs when explicitly updated.
gcode:
    {action_call_remote_method("shutdown_machine")} ; Moonraker compatible host shutdown
    {action_respond_info('action:poweroff')}    ; OctoPrint compatible host shutdown

## -------------------------------------------------------

[delayed_gcode _klipper_shutdown_stage_1]
# This delayed G-code macro handles the configuration backup.
# It is triggered 1 second after the OFF macro completes.
initial_duration: 0 # This ensures it only runs when explicitly updated.
gcode:
    # Perform the configuration backup
    BACKUP_CFG
    # Schedule the final power-off stage.
    # This accounts for the 15-second delay from the original SHUTDOWN macro.
    # The duration is set to 15 seconds, meaning the power-off will occur 15 seconds
    # after the BACKUP_CFG command has been issued.
    UPDATE_DELAYED_GCODE ID=_klipper_shutdown_stage_2 DURATION=15

## -------------------------------------------------------

[gcode_shell_command backup_cfg]
command: ~/printer_data/config/autocommit.sh
timeout: 25
verbose: True

## -------------------------------------------------------

[gcode_macro BACKUP_CFG]
description: Backs up config directory GitHub
gcode:
    RUN_SHELL_COMMAND CMD=backup_cfg


#-----------------------------------------------------------------------------
    
[gcode_macro OFF]
gcode:
    M84                                         ; Turn steppers off
    TURN_OFF_HEATERS                            ; Turn bed / hotend off
    M107                                        ; Turn print cooling fan off
    SET_FAN_SPEED FAN=chamber_filter SPEED=0   ; turn chamber filter fan off
    _SET_STATUS_OFF
    SET_PIN PIN=caselight VALUE=0               ; turn case light off
    # Schedule the next stage of shutdown (backup) after a short delay (1 second)
    # This replaces the initial G4 P1000 from the original SHUTDOWN macro.
    UPDATE_DELAYED_GCODE ID=_klipper_shutdown_stage_1 DURATION=1




[gcode_macro _MANUAL_QGL_EXTENDED_CALIBRATION]
description: Runs a 5-phase probing sequence to gather data for X and Y gantry corner calculation.
gcode:
    {% set DELTA = 1.0 %}
    {% set Z_VEL = 5 %}
    # --- IMPORTANT ---
    # Get the probe points directly from your [quad_gantry_level] config.
    # No need to edit them here.
    {% set probe_points = printer.configfile.settings.quad_gantry_level.points %}

    RESPOND MSG="Starting Extended Quad Gantry Level calibration sequence..."
    
    # Ensure printer is ready
    G28
    QUAD_GANTRY_LEVEL
    G28 Z
    
    # --- Phase 0: Baseline Probe ---
    RESPOND MSG="--- PHASE 0: BASELINE PROBE ---"
    {% for point in probe_points %}
        # --- FIX: Unpack the tuple directly ---
        {% set x, y = point %}
        G0 X{x} Y{y} F9000
        PROBE
    {% endfor %}

    # --- Phase 1: Left Motors Lifted ---
    RESPOND MSG="--- PHASE 1: LEFT MOTORS LIFTED (+{DELTA}mm) ---"
    FORCE_MOVE STEPPER=stepper_z DISTANCE={DELTA} VELOCITY={Z_VEL}
    FORCE_MOVE STEPPER=stepper_z1 DISTANCE={DELTA} VELOCITY={Z_VEL}
    G0 Z{DELTA*2} F1500
    {% for point in probe_points %}
        {% set x, y = point %}
        G0 X{x} Y{y} F9000
        PROBE
    {% endfor %}
    FORCE_MOVE STEPPER=stepper_z DISTANCE=-{DELTA} VELOCITY={Z_VEL}
    FORCE_MOVE STEPPER=stepper_z1 DISTANCE=-{DELTA} VELOCITY={Z_VEL}
    G0 Z{DELTA*2} F1500

    # --- Phase 2: Right Motors Lifted ---
    RESPOND MSG="--- PHASE 2: RIGHT MOTORS LIFTED (+{DELTA}mm) ---"
    FORCE_MOVE STEPPER=stepper_z2 DISTANCE={DELTA} VELOCITY={Z_VEL}
    FORCE_MOVE STEPPER=stepper_z3 DISTANCE={DELTA} VELOCITY={Z_VEL}
    G0 Z{DELTA*2} F1500
    {% for point in probe_points %}
        {% set x, y = point %}
        G0 X{x} Y{y} F9000
        PROBE
    {% endfor %}
    FORCE_MOVE STEPPER=stepper_z2 DISTANCE=-{DELTA} VELOCITY={Z_VEL}
    FORCE_MOVE STEPPER=stepper_z3 DISTANCE=-{DELTA} VELOCITY={Z_VEL}
    G0 Z{DELTA*2} F1500

    # --- Phase 3: Front Motors Lifted ---
    RESPOND MSG="--- PHASE 3: FRONT MOTORS LIFTED (+{DELTA}mm) ---"
    FORCE_MOVE STEPPER=stepper_z DISTANCE={DELTA} VELOCITY={Z_VEL}
    FORCE_MOVE STEPPER=stepper_z3 DISTANCE={DELTA} VELOCITY={Z_VEL}
    G0 Z{DELTA*2} F1500
    {% for point in probe_points %}
        {% set x, y = point %}
        G0 X{x} Y{y} F9000
        PROBE
    {% endfor %}
    FORCE_MOVE STEPPER=stepper_z DISTANCE=-{DELTA} VELOCITY={Z_VEL}
    FORCE_MOVE STEPPER=stepper_z3 DISTANCE=-{DELTA} VELOCITY={Z_VEL}
    G0 Z{DELTA*2} F1500

    # --- Phase 4: Back Motors Lifted ---
    RESPOND MSG="--- PHASE 4: BACK MOTORS LIFTED (+{DELTA}mm) ---"
    FORCE_MOVE STEPPER=stepper_z1 DISTANCE={DELTA} VELOCITY={Z_VEL}
    FORCE_MOVE STEPPER=stepper_z2 DISTANCE={DELTA} VELOCITY={Z_VEL}
    G0 Z{DELTA*2} F1500
    {% for point in probe_points %}
        {% set x, y = point %}
        G0 X{x} Y{y} F9000
        PROBE
    {% endfor %}
    FORCE_MOVE STEPPER=stepper_z1 DISTANCE=-{DELTA} VELOCITY={Z_VEL}
    FORCE_MOVE STEPPER=stepper_z2 DISTANCE=-{DELTA} VELOCITY={Z_VEL}
    G0 Z{DELTA*2} F1500

    RESPOND MSG="--- EXTENDED SEQUENCE COMPLETE ---"
    # Re-home Z to ensure Klipper knows the correct Z position
    G28 Z

