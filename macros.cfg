[include extruder-pa.cfg]
[include build-sheets.cfg]
[include filaments.cfg]
[include KAMP_Settings.cfg]
[include auto-speed.cfg]
# [include klicky-probe.cfg]

[gcode_macro T0]
gcode:


## -------------------------------------------------------
## PRINT START & END
## -------------------------------------------------------

[gcode_macro PRINT_START]
gcode:
    START_PRINT {rawparams}

[gcode_macro START_PRINT] # BEACON
gcode:
    SET_GCODE_OFFSET Z_pos=0.00 MOVE=1
    _SET_MPC_MATERIAL MATERIAL={params.MATERIAL}
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}

    # Home the printer
    G28

    # Move near bed (KAMP) to heat soak beacon
    SMART_PARK

    # Heat bed to print temp
    M140 S{BED_TEMP}

    M109 S{EXTRUDER_TEMP}
    G4 P60000
    BED_MESH_CLEAR
    G28 Z
    QUAD_GANTRY_LEVEL
    M190 S{BED_TEMP}
    M109 S{EXTRUDER_TEMP}
    BED_MESH_CALIBRATE ADAPTIVE=1
    VORON_PURGE

# [gcode_macro START_PRINT] # BEACON
# gcode:
#     SET_GCODE_OFFSET Z_pos=0.00 MOVE=1
#     _SET_MPC_MATERIAL MATERIAL={params.MATERIAL}
#     {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
#     {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}

#     # --- Get the current build sheet ---
#     {% set svv = printer.save_variables.variables %}
#     {% set sheet_key = (svv["build_sheet installed"] | default("")) %}
#     {% set sheet = (svv[sheet_key] | default(None)) %}
    
#     # Home the printer
#     G28

#     # Move near bed (KAMP) to heat soak beacon
#     SMART_PARK

#     # Heat bed to print temp
#     M140 S{BED_TEMP}

#     # --- Conditional extruder heating for probing ---
#     # Heat extruder to 150C for probing ONLY if the smooth sheet is installed.
#     # This is useful for temperature-sensitive probes like inductive sensors.
#     {% if sheet and sheet.name | lower == 'smooth pei' %}
#         {action_respond_info("Smooth PEI sheet detected. Heating nozzle to 150C for probing.")}
#         M109 S150
#     {% else %}
#         {action_respond_info("Textured PEI or other sheet detected. Probing at printing nozzle temperature.")}
#         M109 S{EXTRUDER_TEMP}
#     {% endif %}

#     # Wait for bed to reach temperature
#     M190 S{BED_TEMP}
    
#     # Clear previous mesh
#     BED_MESH_CLEAR
    
#     G28 Z METHOD=CONTACT CALIBRATE=1    ; calibrate z offset and beacon model hot
#     QUAD_GANTRY_LEVEL                   ; level gantry
#     BED_MESH_CALIBRATE RUNS=2           ; bed mesh in scan mode
    
#     # # Wipe Nozzle
#     # WIPE_NOZZLE
#     G28 Z METHOD=CONTACT CALIBRATE=0    ; calibrate z offset only after tilt/mesh

#     # Move near bed (KAMP)
#     SMART_PARK
    
#     # Set and wait for nozzle to reach printing temperature
#     M104 S{EXTRUDER_TEMP}
#     M109 S{EXTRUDER_TEMP}

#     # Offset for thermal expansion
#     SET_GCODE_OFFSET Z=0.06 ; fine tune later

#     # Adaptive Voron Purge (KAMP)
#     VORON_PURGE


[gcode_macro PRINT_END]
gcode:
    END_PRINT {rawparams}

    
[gcode_macro END_PRINT]
gcode:
    # Move nozzle away from print while retracting
    G91
    G1 X-2 Y-2 E-18 F300
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    # Park nozzle
    PARK
    G90
    # Disable steppers
    M84


## -------------------------------------------------------
## MOVEMENT MACROS
## -------------------------------------------------------

[gcode_macro FRONT]
description: Move toolhead to the front-center of the bed
gcode:
    {% set x_center = printer.toolhead.axis_maximum.x / 2 %}
    {% set y_front = printer.toolhead.axis_minimum.y + 10 %}
    G90
    G0 X{x_center} Y{y_front} F{6000}

[gcode_macro CENTER]
description: Move toolhead to the absolute center of the bed
gcode:
    {% set x_center = printer.toolhead.axis_maximum.x / 2 %}
    {% set y_center = printer.toolhead.axis_maximum.y / 2 %}
    G90
    G0 X{x_center} Y{y_center} F{6000}

[gcode_macro REAR]
description: Move toolhead to the rear-center of the bed
gcode:
    {% set x_center = printer.toolhead.axis_maximum.x / 2 %}
    {% set y_rear = printer.toolhead.axis_maximum.y - 10 %}
    G90
    G0 X{x_center} Y{y_rear} F{6000}

[gcode_macro PARK]
gcode:
    {% set z_max = printer.toolhead.axis_maximum.z %}   
    {% set z_pos = printer.toolhead.position.z %}
    {% set y_max = printer.toolhead.axis_maximum.y %}
    {% set y_min = printer.toolhead.axis_minimum.y %}
    {% set x_min = printer.toolhead.axis_minimum.x %}
    {% set travel_speed = printer.toolhead.max_velocity * 0.7 * 60 %}
    {% set z_travel_speed = printer.configfile.settings.printer.max_z_velocity * 60 %}
    {% set park_height = (z_max*0.65)|int %}

    ## This sets your park position, it should be safe, BUT test carfully
    ## It uses the data from printer.toolhead which is the live data on where the toolhead can be moved
    ## If this gets it wrong, check your config file for min/max positions is correct
    {% set x = params.X|default(x_max - 5) %}         #edit to your park position
    {% set y = params.Y|default(y_max - 5) %}         #edit to your park position
    {% set z = params.Z|default(park_height)|float %} #edit to your park position
    
    

    {% if z_pos > (z_max ) %}
      M117 Z {z_pos} Cant raise
      UPDATE_DELAYED_GCODE ID=clear_display DURATION=10
    {% elif z_pos > park_height + 0.04 %}
      #M117 Z {z_pos} goto { (( z_max - 10 - z_pos) * 0.5 ) + z_pos }
      UPDATE_DELAYED_GCODE ID=clear_display DURATION=10
      G1 Z { (( z_max - 10 - z_pos) * 0.5 ) + z_pos } F600
    {% elif z_pos < park_height -0.04 %}
      #M117 Z {z_pos} goto {park_height}
      UPDATE_DELAYED_GCODE ID=clear_display DURATION=10
      G1 Z {z} F{z_travel_speed}
    {% else %}
      M117 I think we are already at park height
      UPDATE_DELAYED_GCODE ID=clear_display DURATION=10
    {% endif %}
    G1 Y {y} X {x} F{travel_speed}
    

[gcode_macro PRESENT]
gcode:
    {% set my_y = printer.toolhead.axis_maximum.y - 5 %}
    PARK Y={my_y}


## -------------------------------------------------------
## CONDITIONAL MACROS
## -------------------------------------------------------

[gcode_macro CONDITIONAL_HOME]
description: Homes the printer if it has not been homed yet.
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}


## -------------------------------------------------------
## UPDATE MACROS
## -------------------------------------------------------

[gcode_macro _SET_MPC_MATERIAL]
description: Set heater MPC parameters for a given material
variable_filament_table:
    ## Update this table to adjust material settings
    {
        ## ( density, heat capacity )  # suggested heat capacity range
        "PLA"       : ( 1.25, 2.20 ),  # 1.80 - 2.20
        "PETG"      : ( 1.27, 2.20 ),  # 1.70 - 2.20
        "PC+ABS"    : ( 1.15, 2.20 ),  # 1.50 - 2.20
        "ABS"       : ( 1.06, 2.40 ),  # 1.25 - 2.40
        "ASA"       : ( 1.07, 2.10 ),  # 1.30 - 2.10
        "PA6"       : ( 1.12, 2.50 ),  # 2.00 - 2.50
        "PA"        : ( 1.15, 2.50 ),  # 2.00 - 2.50
        "PC"        : ( 1.20, 1.90 ),  # 1.10 - 1.90
        "TPU"       : ( 1.21, 2.00 ),  # 1.50 - 2.00
        "TPU-90A"   : ( 1.15, 2.00 ),  # 1.50 - 2.00
        "TPU-95A"   : ( 1.22, 2.00 ),  # 1.50 - 2.00
        "ABS-CF"    : ( 1.11, 2.40 ),  # 1.25 - 2.40
        "ASA-CF"    : ( 1.11, 2.10 ),  # 1.30 - 2.10
        "PA6-CF"    : ( 1.19, 2.50 ),  # 2.00 - 2.50
        "PC+ABS-CF" : ( 1.22, 2.20 ),  # 1.50 - 2.20
        "PC+CF"     : ( 1.36, 1.90 ),  # 1.10 - 1.90
        "PLA-CF"    : ( 1.29, 2.20 ),  # 1.80 - 2.20
        "PETG-CF"   : ( 1.30, 2.20 ),  # 1.70 - 2.20
    }
gcode:
    {% set material = params.MATERIAL | upper %}
    {% set heater = params.HEATER | default('extruder') %}
    {% set extruder_config = printer.configfile.settings[heater] %}

    {% if material in filament_table %}
        {% set (density, heat_capacity) = filament_table[material] %}

        RESPOND PREFIX=ðŸ”¥ MSG="Configured {heater} MPC for {material}. Density: {density}, Heat Capacity: {heat_capacity}"
    {% else %}
        {% set density = extruder_config.filament_density %}
        {% set heat_capacity=extruder_config.filament_heat_capacity %}

        RESPOND PREFIX=ðŸ”¥ MSG="Unknown material '{material}', using default mpc parameters for {heater}"
    {% endif %}

    MPC_SET HEATER={heater} FILAMENT_DENSITY={density} FILAMENT_HEAT_CAPACITY={heat_capacity}


## -------------------------------------------------------
## LEDs
## -------------------------------------------------------

[gcode_macro _klicky_status_ready]
gcode:
    {% if printer['gcode_macro status_ready'] is defined %}
        _KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"
        STATUS_READY
    {% endif %}

[gcode_macro _klicky_status_busy]
gcode:
    {% if printer['gcode_macro status_busy'] is defined %}
        _KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"
        STATUS_BUSY
    {% endif %}

[gcode_macro _klicky_status_leveling]
gcode:
    {% if printer['gcode_macro status_leveling'] is defined %}
        _KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"
        STATUS_LEVELING
    {% endif %}

[gcode_macro _klicky_status_homing]
gcode:
    {% if printer['gcode_macro status_homing'] is defined %}
        _KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"
        STATUS_HOMING
    {% endif %}

[gcode_macro _klicky_status_cleaning]
gcode:
    {% if printer['gcode_macro status_cleaning'] is defined %}
        _KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"
        STATUS_CLEANING
    {% endif %}

[gcode_macro _klicky_status_meshing]
gcode:
    {% if printer['gcode_macro status_meshing'] is defined %}
        _KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"
        STATUS_MESHING
    {% endif %}

[gcode_macro _klicky_status_calibrating_z]
gcode:
    {% if printer['gcode_macro status_calibrating_z'] is defined %}
        _KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"
        STATUS_CALIBRATING_Z
    {% endif %}


## -------------------------------------------------------
## OVERRIDES
## -------------------------------------------------------


[gcode_macro M109] # Wait Hotend Temp
rename_existing: M109.1
gcode:
    #Parameters
    {% set s = params.S|float %}

    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  # Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s-2} MAXIMUM={s+5}   # Wait for hotend temp (within n degrees)
    {% endif %}


[gcode_macro M190] # Wait Bed Temp
rename_existing: M190.1
gcode:
    #Parameters
    {% set s = params.S|float %}

    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   # Set bed temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s-2} MAXIMUM={s+5}  # Wait for bed temp (within n degrees)
    {% endif %}


[gcode_macro SHUTDOWN]
gcode:


[gcode_shell_command backup_cfg]
command: ~/printer_data/config/autocommit.sh

[gcode_macro BACKUP_CONFIG]
description: Backs up printer config to GitHub for easy restoration of working states.
gcode: 
    RUN_SHELL_COMMAND CMD=backup_cfg
