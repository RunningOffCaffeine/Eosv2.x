[include extruder-pa.cfg]
[include build-sheets.cfg]
[include filaments.cfg]
[include KAMP_Settings.cfg]
[include auto-speed.cfg]
# [include klicky-probe.cfg]

[gcode_macro T0]
gcode:


## -------------------------------------------------------
## PRINT START & END
## -------------------------------------------------------

[gcode_macro PRINT_START]
gcode:
    START_PRINT {rawparams}

[gcode_macro START_PRINT] # BEACON
gcode:
    # --- Get Parameters from Slicer ---
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(210)|float %}
    {% set MATERIAL = params.MATERIAL|default("PLA")|upper %}
    {% set NOZZLE_SIZE = params.NOZZLE_SIZE|default(0.4)|float %}
    {% set LAYER_HEIGHT = params.LAYER_HEIGHT|default(0.2)|float %}

    # --- Set initial printer state & filament profiles ---
    SET_GCODE_OFFSET Z=0.0 MOVE=1
    _SET_MPC_MATERIAL MATERIAL={MATERIAL}
    _SET_FIRMWARE_RETRACTION MATERIAL={MATERIAL}

    # --- DYNAMIC PRESSURE ADVANCE CALCULATION ---
    {% set line_width = params.LINE_WIDTH | default(NOZZLE_SIZE * 1.25) | float %}
    {% set print_speed = params.PRINT_SPEED | default(60) | float %}
    # For Bowden, measure tube in cm. For Direct Drive, use a small value like 0.5 to 2.
    {% set tube_length_cm = params.TUBE_LENGTH | default(0.5) | float %}
    {% set filament_diameter = 1.75 %}

    {% set material_constants = {
        'PLA': 85, 'PETG': 100, 'ABS': 95, 'ASA': 100,
        'TPU': 140, 'FLEX': 140, 'NYLON': 120, 'PA': 120, 'PVB': 85
    } %}

    {% if MATERIAL in material_constants %}
        {% set K = material_constants[MATERIAL] %}
        {% set tube_length_dm = tube_length_cm / 10.0 %}
        {% set filament_area = (3.14159 * (filament_diameter / 2) ** 2) %}
        {% set flow_rate = line_width * LAYER_HEIGHT * print_speed %}
        {% set pressure_advance = (flow_rate * tube_length_dm) / (K * filament_area) %}

        RESPOND TYPE=command MSG="Calculated PA for {MATERIAL}: {pressure_advance|round(4)}"
        SET_PRESSURE_ADVANCE ADVANCE={pressure_advance}
    {% else %}
        RESPOND TYPE=command MSG="Warning: PA Material '{MATERIAL}' not found. Using printer's default PA."
    {% endif %}
    # --- END OF PA CALCULATION ---
    
    # --- Printer Homing and Calibration Sequence ---
    G28
    SMART_PARK      ; Move near bed (KAMP) to heat soak beacon
    M140 S{BED_TEMP}  ; Start heating bed
    M109 S{EXTRUDER_TEMP} ; Set extruder temp and wait
    G4 P60000       ; Optional heat soak dwell for 60 seconds
    
    M190 S{BED_TEMP}  ; Wait for bed to reach temp
    
    BED_MESH_CLEAR
    QUAD_GANTRY_LEVEL
    G28 Z
    BED_MESH_CALIBRATE ADAPTIVE=1
    
    VORON_PURGE     ; KAMP adaptive purge line
    # --- Begin Print! ---

# [gcode_macro START_PRINT] # BEACON
# description: Advanced print start sequence for Beacon with dynamic PA.
# gcode:
#     # --- Get Parameters from Slicer ---
#     {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
#     {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(210)|float %}
#     {% set MATERIAL = params.MATERIAL|default("PLA")|upper %}
#     {% set NOZZLE_SIZE = params.NOZZLE_SIZE|default(0.4)|float %}
#     {% set LAYER_HEIGHT = params.LAYER_HEIGHT|default(0.2)|float %}

#     # --- Set initial printer state & filament profiles ---
#     SET_GCODE_OFFSET Z=0.0 MOVE=1
#     _SET_MPC_MATERIAL MATERIAL={MATERIAL}
#     _SET_FIRMWARE_RETRACTION MATERIAL={MATERIAL}

#     # --- DYNAMIC PRESSURE ADVANCE CALCULATION ---
#     {% set line_width = params.LINE_WIDTH | default(NOZZLE_SIZE * 1.25) | float %}
#     {% set print_speed = params.PRINT_SPEED | default(60) | float %}
#     # For Bowden, measure tube in cm. For Direct Drive, use a small value like 0.5 to 2.
#     {% set tube_length_cm = params.TUBE_LENGTH | default(0.5) | float %}
#     {% set filament_diameter = 1.75 %}

#     {% set material_constants = {
#         'PLA': 85, 'PETG': 100, 'ABS': 95, 'ASA': 100,
#         'TPU': 140, 'FLEX': 140, 'NYLON': 120, 'PA': 120, 'PVB': 85
#     } %}

#     {% if MATERIAL in material_constants %}
#         {% set K = material_constants[MATERIAL] %}
#         {% set tube_length_dm = tube_length_cm / 10.0 %}
#         {% set filament_area = (3.14159 * (filament_diameter / 2) ** 2) %}
#         {% set flow_rate = line_width * LAYER_HEIGHT * print_speed %}
#         {% set pressure_advance = (flow_rate * tube_length_dm) / (K * filament_area) %}

#         RESPOND TYPE=command MSG="Calculated PA for {MATERIAL}: {pressure_advance|round(4)}"
#         SET_PRESSURE_ADVANCE ADVANCE={pressure_advance}
#     {% else %}
#         RESPOND TYPE=command MSG="Warning: PA Material '{MATERIAL}' not found. Using printer's default PA."
#     {% endif %}
#     # --- END OF PA CALCULATION ---

#     # --- Get the current build sheet for conditional probing ---
#     {% set svv = printer.save_variables.variables %}
#     {% set sheet_key = (svv["build_sheet installed"] | default("")) %}
#     {% set sheet = (svv[sheet_key] | default(None)) %}
    
#     # --- Homing and Heating Sequence ---
#     G28 ; Home all axes
#     SMART_PARK ; Move near bed (KAMP) to heat soak beacon
#     M140 S{BED_TEMP} ; Start heating bed

#     # Conditional extruder heating for probing
#     {% if sheet and sheet.name | lower == 'smooth pei' %}
#         {action_respond_info("Smooth PEI sheet detected. Heating nozzle to 150C for probing.")}
#         M109 S150
#     {% else %}
#         {action_respond_info("Textured or other sheet detected. Heating nozzle to full temp for probing.")}
#         M109 S{EXTRUDER_TEMP}
#     {% endif %}

#     M190 S{BED_TEMP} ; Wait for bed to reach temperature
    
#     # --- Calibration Sequence ---
#     BED_MESH_CLEAR
#     G28 Z METHOD=CONTACT CALIBRATE=1   ; Calibrate Z offset and Beacon model while hot
#     QUAD_GANTRY_LEVEL                  ; Level gantry
#     BED_MESH_CALIBRATE ADAPTIVE=1      ; Create an adaptive bed mesh
    
#     # Optional: Re-check Z offset after QGL and mesh
#     # G28 Z METHOD=CONTACT CALIBRATE=0   ; Re-check Z offset using existing model

#     # --- Final Heating and Purge ---
#     SMART_PARK ; Park nozzle at front of bed
#     M109 S{EXTRUDER_TEMP} ; Ensure nozzle is at final print temp

#     # Optional: Apply a small offset for thermal expansion. Tune this value for your printer.
#     # SET_GCODE_OFFSET Z=0.02

#     VORON_PURGE ; Adaptive Voron Purge (KAMP)


[gcode_macro PRINT_END]
gcode:
    END_PRINT {rawparams}

    
[gcode_macro END_PRINT]
gcode:
    # Move nozzle away from print while retracting
    G91
    G1 X-2 Y-2 E-18 F300
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    # Park nozzle
    PARK
    G90
    # Disable steppers
    M84


## -------------------------------------------------------
## MOVEMENT MACROS
## -------------------------------------------------------

[gcode_macro FRONT]
description: Move toolhead to the front-center of the bed
gcode:
    {% set x_center = printer.toolhead.axis_maximum.x / 2 %}
    {% set y_front = printer.toolhead.axis_minimum.y + 10 %}
    G90
    G0 X{x_center} Y{y_front} F{6000}

[gcode_macro CENTER]
description: Move toolhead to the absolute center of the bed
gcode:
    {% set x_center = printer.toolhead.axis_maximum.x / 2 %}
    {% set y_center = printer.toolhead.axis_maximum.y / 2 %}
    G90
    G0 X{x_center} Y{y_center} F{6000}

[gcode_macro REAR]
description: Move toolhead to the rear-center of the bed
gcode:
    {% set x_center = printer.toolhead.axis_maximum.x / 2 %}
    {% set y_rear = printer.toolhead.axis_maximum.y - 10 %}
    G90
    G0 X{x_center} Y{y_rear} F{6000}

[gcode_macro PARK]
gcode:
    {% set z_max = printer.toolhead.axis_maximum.z %}   
    {% set z_pos = printer.toolhead.position.z %}
    {% set y_max = printer.toolhead.axis_maximum.y %}
    {% set y_min = printer.toolhead.axis_minimum.y %}
    {% set x_min = printer.toolhead.axis_minimum.x %}
    {% set travel_speed = printer.toolhead.max_velocity * 0.7 * 60 %}
    {% set z_travel_speed = printer.configfile.settings.printer.max_z_velocity * 60 %}
    {% set park_height = (z_max*0.65)|int %}

    ## This sets your park position, it should be safe, BUT test carfully
    ## It uses the data from printer.toolhead which is the live data on where the toolhead can be moved
    ## If this gets it wrong, check your config file for min/max positions is correct
    {% set x = params.X|default(x_max - 5) %}         #edit to your park position
    {% set y = params.Y|default(y_max - 5) %}         #edit to your park position
    {% set z = params.Z|default(park_height)|float %} #edit to your park position
    
    

    {% if z_pos > (z_max ) %}
      M117 Z {z_pos} Cant raise
      UPDATE_DELAYED_GCODE ID=clear_display DURATION=10
    {% elif z_pos > park_height + 0.04 %}
      #M117 Z {z_pos} goto { (( z_max - 10 - z_pos) * 0.5 ) + z_pos }
      UPDATE_DELAYED_GCODE ID=clear_display DURATION=10
      G1 Z { (( z_max - 10 - z_pos) * 0.5 ) + z_pos } F600
    {% elif z_pos < park_height -0.04 %}
      #M117 Z {z_pos} goto {park_height}
      UPDATE_DELAYED_GCODE ID=clear_display DURATION=10
      G1 Z {z} F{z_travel_speed}
    {% else %}
      M117 I think we are already at park height
      UPDATE_DELAYED_GCODE ID=clear_display DURATION=10
    {% endif %}
    G1 Y {y} X {x} F{travel_speed}
    

[gcode_macro PRESENT]
gcode:
    {% set my_y = printer.toolhead.axis_maximum.y - 5 %}
    PARK Y={my_y}


## -------------------------------------------------------
## CONDITIONAL MACROS
## -------------------------------------------------------

[gcode_macro CONDITIONAL_HOME]
description: Homes the printer if it has not been homed yet.
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}


## -------------------------------------------------------
## UPDATE MACROS
## -------------------------------------------------------

[gcode_macro _SET_MPC_MATERIAL]
description: Set heater MPC parameters for a given material
variable_filament_table:
    ## Update this table to adjust material settings
    {
        ## ( density, heat capacity )  # suggested heat capacity range
        "PLA"       : ( 1.25, 2.20 ),  # 1.80 - 2.20
        "PETG"      : ( 1.27, 2.20 ),  # 1.70 - 2.20
        "PC+ABS"    : ( 1.15, 2.20 ),  # 1.50 - 2.20
        "ABS"       : ( 1.06, 2.40 ),  # 1.25 - 2.40
        "ASA"       : ( 1.07, 2.10 ),  # 1.30 - 2.10
        "PA6"       : ( 1.12, 2.50 ),  # 2.00 - 2.50
        "PA"        : ( 1.15, 2.50 ),  # 2.00 - 2.50
        "PC"        : ( 1.20, 1.90 ),  # 1.10 - 1.90
        "TPU"       : ( 1.21, 2.00 ),  # 1.50 - 2.00
        "TPU-90A"   : ( 1.15, 2.00 ),  # 1.50 - 2.00
        "TPU-95A"   : ( 1.22, 2.00 ),  # 1.50 - 2.00
        "ABS-CF"    : ( 1.11, 2.40 ),  # 1.25 - 2.40
        "ASA-CF"    : ( 1.11, 2.10 ),  # 1.30 - 2.10
        "PA6-CF"    : ( 1.19, 2.50 ),  # 2.00 - 2.50
        "PC+ABS-CF" : ( 1.22, 2.20 ),  # 1.50 - 2.20
        "PC+CF"     : ( 1.36, 1.90 ),  # 1.10 - 1.90
        "PLA-CF"    : ( 1.29, 2.20 ),  # 1.80 - 2.20
        "PETG-CF"   : ( 1.30, 2.20 ),  # 1.70 - 2.20
    }
gcode:
    {% set material = params.MATERIAL | upper %}
    {% set heater = params.HEATER | default('extruder') %}
    {% set extruder_config = printer.configfile.settings[heater] %}

    {% if material in filament_table %}
        {% set (density, heat_capacity) = filament_table[material] %}

        RESPOND PREFIX=🔥 MSG="Configured {heater} MPC for {material}. Density: {density}, Heat Capacity: {heat_capacity}"
    {% else %}
        {% set density = extruder_config.filament_density %}
        {% set heat_capacity=extruder_config.filament_heat_capacity %}

        RESPOND PREFIX=🔥 MSG="Unknown material '{material}', using default mpc parameters for {heater}"
    {% endif %}

    MPC_SET HEATER={heater} FILAMENT_DENSITY={density} FILAMENT_HEAT_CAPACITY={heat_capacity}

[gcode_macro _SET_FIRMWARE_RETRACTION]
description: Set printer retract parameters for given materials
variable_filament_table:
# The format for each entry is:
# "MATERIAL_NAME": (retract_length, retract_speed, unretract_extra_length, unretract_speed)
  {
    # --- Common Filaments ---
    "PLA":    (0.5, 40, 0, 30),
    "PLA+":   (0.6, 40, 0, 30),
    "PETG":   (0.8, 35, 0, 25),
    "ABS":    (0.7, 45, 0, 40),
    "ASA":    (0.7, 45, 0, 40),

    # --- Flexible Filaments (TPU) ---
    # Note: Retraction for flexibles should be slow and short to prevent clogging.
    "TPU-95A": (1.0, 20, 0, 20),
    "TPU-90A": (1.2, 20, 0, 20),

    # --- Engineering Filaments ---
    "PC":     (0.6, 50, 0, 40),
    "PA":     (0.6, 40, 0, 35), # Nylon
    "PA6":    (0.6, 40, 0, 35),

    # --- Carbon Fiber (CF) Reinforced Filaments ---
    # These can be more abrasive and may require slightly different settings.
    "PLA-CF":   (0.5, 40, 0, 30),
    "PETG-CF":  (0.8, 35, 0, 25),
    "ABS-CF":   (0.7, 45, 0, 40),
    "ASA-CF":   (0.7, 45, 0, 40),
    "PA6-CF":   (0.6, 40, 0, 35)
  }

gcode:
  {% set material = params.MATERIAL | default('PLA') | upper %}

  # Check if the provided material exists in our table.
  {% if material in filament_table %}
    # Retrieve the settings from the table.
    {% set R_LENGTH, R_SPEED, U_EXTRA, U_SPEED = filament_table[material] %}

    # Send a message to the console confirming the change.
    RESPOND TYPE=command MSG="Setting firmware retraction for {material}."

    # Apply the new retraction settings.
    SET_RETRACTION RETRACT_LENGTH={R_LENGTH} RETRACT_SPEED={R_SPEED} UNRETRACT_EXTRA_LENGTH={U_EXTRA} UNRETRACT_SPEED={U_SPEED}

  {% else %}
    # If the material is not found, raise an error.
    { action_raise_error("Unknown material: '" ~ material ~ "'. Please add it to the _SET_FIRMWARE_RETRACTION macro table.") }
  {% endif %}

[gcode_macro _CALCULATE_PA]
description: Automatically calculate and set a baseline Pressure Advance value.
gcode:
    # --- Parameters with default values ---
    # Slicer placeholders (e.g., {filament_type}) should be used here.
    {% set material = params.MATERIAL | default("PLA") | upper %}
    {% set nozzle_size = params.NOZZLE_SIZE | default(0.4) | float %}
    {% set layer_height = params.LAYER_HEIGHT | default(0.2) | float %}
    {% set line_width = params.LINE_WIDTH | default(nozzle_size * 1.25) | float %}
    {% set print_speed = params.PRINT_SPEED | default(60) | float %}

    # --- Printer specific configuration ---
    # For Bowden setups, measure the length of your PTFE tube in cm.
    # For Direct Drive, use a small empirical value. 0.5 to 2cm is a good starting point.
    {% set tube_length_cm = params.TUBE_LENGTH | default(0.5) | float %}
    {% set filament_diameter = params.FILAMENT_DIAMETER | default(1.75) | float %}

    # --- Material stiffness constants (higher value = stiffer material) ---
    # These are empirical values and may need tuning for your specific filament brand.
    {% set material_constants = {
        'PLA': 85,
        'PETG': 100,
        'ABS': 95,
        'ASA': 100,
        'TPU': 140,
        'FLEX': 140,
        'NYLON': 120,
        'PA': 120,
        'PVB': 85
    } %}

    # --- Calculation ---
    # Check if the material is defined in our table.
    {% if material in material_constants %}
        {% set K = material_constants[material] %}
        
        # Convert tube length from cm to dm for the formula.
        {% set tube_length_dm = tube_length_cm / 10.0 %}
        
        # Calculate the cross-sectional area of the filament.
        {% set filament_area = (3.14159 * (filament_diameter / 2) ** 2) %}
        
        # Calculate the volumetric flow rate in mm^3/s.
        {% set flow_rate = line_width * layer_height * print_speed %}
        
        # Calculate the estimated Pressure Advance value.
        {% set pressure_advance = (flow_rate * tube_length_dm) / (K * filament_area) %}

        # Set the new Pressure Advance value.
        SET_PRESSURE_ADVANCE ADVANCE={pressure_advance}

        RESPOND TYPE=command MSG="Calculated PA for {material}: {pressure_advance|round(4)}"

    {% else %}
        # If the material is not found, raise an error.
        { action_raise_error("Unknown material for PA calculation: '" ~ material ~ "'.") }
    {% endif %}


## -------------------------------------------------------
## LEDs
## -------------------------------------------------------

[gcode_macro _klicky_status_ready]
gcode:
    {% if printer['gcode_macro status_ready'] is defined %}
        _KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"
        STATUS_READY
    {% endif %}

[gcode_macro _klicky_status_busy]
gcode:
    {% if printer['gcode_macro status_busy'] is defined %}
        _KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"
        STATUS_BUSY
    {% endif %}

[gcode_macro _klicky_status_leveling]
gcode:
    {% if printer['gcode_macro status_leveling'] is defined %}
        _KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"
        STATUS_LEVELING
    {% endif %}

[gcode_macro _klicky_status_homing]
gcode:
    {% if printer['gcode_macro status_homing'] is defined %}
        _KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"
        STATUS_HOMING
    {% endif %}

[gcode_macro _klicky_status_cleaning]
gcode:
    {% if printer['gcode_macro status_cleaning'] is defined %}
        _KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"
        STATUS_CLEANING
    {% endif %}

[gcode_macro _klicky_status_meshing]
gcode:
    {% if printer['gcode_macro status_meshing'] is defined %}
        _KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"
        STATUS_MESHING
    {% endif %}

[gcode_macro _klicky_status_calibrating_z]
gcode:
    {% if printer['gcode_macro status_calibrating_z'] is defined %}
        _KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"
        STATUS_CALIBRATING_Z
    {% endif %}


## -------------------------------------------------------
## OVERRIDES
## -------------------------------------------------------


[gcode_macro M109] # Wait Hotend Temp
rename_existing: M109.1
gcode:
    #Parameters
    {% set s = params.S|float %}

    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  # Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s-2} MAXIMUM={s+5}   # Wait for hotend temp (within n degrees)
    {% endif %}


[gcode_macro M190] # Wait Bed Temp
rename_existing: M190.1
gcode:
    #Parameters
    {% set s = params.S|float %}

    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   # Set bed temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s-2} MAXIMUM={s+5}  # Wait for bed temp (within n degrees)
    {% endif %}


[gcode_macro OFF]
gcode:
    M84                                         ; turn steppers off
    TURN_OFF_HEATERS                            ; turn bed / hotend off
    M107                                        ; turn print cooling fan off
    SET_FAN_SPEED FAN=MCU_Fan SPEED=0           ; turn exhaust fan off
    SET_FAN_SPEED FAN=Chamber_Filter SPEED=0    ; bed fan off
    SET_PIN PIN=caselight VALUE=0               ; turn case light off
    

[gcode_macro SHUTDOWN]
gcode:
    LCDRGB R=0 G=0 B=0                                ; Turn off LCD neopixels (see above for this macro)
    OFF                                               ; Shortcut to turn everything off (see above for this macro)
    BACKUP_CFG
    G4 P10000
    {action_respond_info('action:poweroff')}          ; OctoPrint compatible host shutdown
	{action_call_remote_method("shutdown_machine")}   ; Moonraker compatible host shutdown


[gcode_shell_command backup_cfg]
command: ~/printer_data/config/autocommit.sh
timeout: 30
verbose: True

[gcode_macro BACKUP_CFG]
description: Backs up config directory GitHub
gcode:
    RUN_SHELL_COMMAND CMD=backup_cfg
