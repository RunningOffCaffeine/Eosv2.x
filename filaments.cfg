# TODO:
# * Support for multiple extruders: filament can be set on an extruder
# * Support for multiple extruders: bed temp can be set from one of the selected extruders.
# * If the printer only has 1 tool hide all the TOOL stuff so its not annoying

# Storage structure in Saved variables
# each filament is a structure that stores the extruder and bed temperatures for that filament
#    
#    filaments_Prusament_PETG: {
#        name: "Prusament PETG"
#        extruder: 260
#        bed: 85
#    }
#
#    filaments_KVP_ABS: {
#        name: "KVP ABS"
#        extruder: 250
#        bed: 105
#    }
#
# Filaments set on a tool are stored by reference
# #since multiple extruders are supported, each tool in the machine 
#    filament_installed_t0: "filament_Prusament_PETG"
#    filament_installed_t1: "filament_KVP_ABS"

# [filaments]
# on_set_filament_gcode:
#     # This command runs automatically when you use SET_FILAMENT.
#     # It passes the custom properties from the preset to the macro above.
#     _SET_MPC_FROM_PRESET NAME='{params.PRESET.name}' DENSITY={params.PRESET.density} HEAT_CAPACITY={params.PRESET.heat_capacity}


#####################################################################
#                           FILAMENT HANDLING
#####################################################################
# This is a comprehensive system for creating, managing, and using
# filament presets that are stored persistently in variables.cfg.
#####################################################################

## --- USER VARIABLES ---
# This is a container for all user-configurable settings.
[gcode_macro _USER_VARIABLES_FILAMENT_HANDLING]
variable_park_x: 175
variable_park_y: 5
variable_park_z_lift: 50
variable_extrude_temp_default: 215 # Fallback temperature if no filament is set
variable_unload_length: 200
variable_load_length: 60
variable_purge_length: 25
gcode: # This macro does nothing on its own.


## --- USER-FACING COMMANDS ---
[gcode_macro SETUP_FILAMENT]
description: Creates or updates a filament preset with a given name and temperatures.
gcode:
    {% set filament_name = params.NAME|string %}
    {% if not filament_name %}
        {action_raise_error("A name is required. e.g., SETUP_FILAMENT NAME='My Filament'")}
    {% endif %}
    {% set extruder_temp = params.EXTRUDER|float %}
    {% if not extruder_temp %}
        {action_raise_error("An extruder temp is required. e.g., SETUP_FILAMENT EXTRUDER=210")}
    {% endif %}
    {% set bed_temp = params.BED|float %}
    {% if not bed_temp %}
        {action_raise_error("A bed temp is required. e.g., SETUP_FILAMENT BED=60")}
    {% endif %}
    {% set filament_key = "filaments_" ~ (filament_name | lower | replace(" ", "_")) %}
    {% set filament = {"name": filament_name, "extruder": extruder_temp, "bed": bed_temp} %}
    
    SAVE_VARIABLE VARIABLE="{filament_key}" VALUE="{filament}"
    {action_respond_info("Filament preset '%s' saved." % filament_name)}


[gcode_macro SET_FILAMENT]
description: Sets the filament that the printer is using.
gcode:
    _FILAMENTS_SET_FILAMENT NAME={params.NAME}

[gcode_macro UNSET_FILAMENT]
description: Clears the assigned filament from a toolhead.
gcode:
    _FILAMENTS_UNSET_FILAMENT


[gcode_macro FILAMENT_STATUS]
description: Displays the filament assigned to the toolhead in the console.
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set filament_key = svv.get("filament_installed_t0") %}
    {% set filament = svv.get(filament_key) if filament_key else None %}
    {% if not filament %}
        {action_respond_info("No Filament Set")}
    {% else %}
        {action_respond_info("Filament: %s - %.0fC/%.0fC" % (filament.name, filament.extruder, filament.bed))}
    {% endif %}


[gcode_macro LIST_FILAMENTS]
description: Lists all available filament presets.
gcode:
    {% set svv = printer.save_variables.variables %}
    {action_respond_info("--- AVAILABLE FILAMENTS ---")}
    {% for key, filament in svv | dictsort %}
        {% if key.startswith("filaments_") %}
            {action_respond_info("- %s: %.0fC / %.0fC" % (filament.name, filament.extruder, filament.bed))}
        {% endif %}
    {% endfor %}


[gcode_macro PREHEAT]
description: Start heating the extruder and bed.
gcode:
    PREHEAT_BED
    PREHEAT_EXTRUDER


[gcode_macro HEAT_AND_WAIT]
description: Heat extruder and bed and wait for both to reach temperature.
gcode:
    _FILAMENTS_ASSERT_FILAMENT_SET
    {% set svv = printer.save_variables.variables %}
    {% set filament = svv.get(svv.get("filament_installed_t0")) %}
    
    {action_respond_info("Heating bed to %.0fC and extruder to %.0fC..." % (filament.bed, filament.extruder))}
    M140 S{filament.bed}
    M104 S{filament.extruder}
    M190 S{filament.bed}
    M109 S{filament.extruder}


[gcode_macro LOAD_FILAMENT]
description: Loads filament using the preset temperature.
gcode:
    _FILAMENTS_ASSERT_FILAMENT_SET
    _INTERNAL_LOAD_FILAMENT


[gcode_macro UNLOAD_FILAMENT]
description: Unloads filament using the preset temperature.
gcode:
    _FILAMENTS_ASSERT_FILAMENT_SET
    _INTERNAL_UNLOAD_FILAMENT


[gcode_macro M600]
description: Filament change macro.
gcode:
    CHANGE_FILAMENT {rawparams}


[gcode_macro CHANGE_FILAMENT]
description: Pause print, unload, wait for new filament, load, and resume.
gcode:
    _FILAMENTS_ASSERT_FILAMENT_SET
    PAUSE
    SAVE_GCODE_STATE NAME=M600_state
    _INTERNAL_UNLOAD_FILAMENT
    SAVE_VARIABLE VARIABLE=m600_state VALUE="'loading'"
    M117 Insert new filament and click RESUME


[gcode_macro RESUME]
rename_existing: RESUME_BASE
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set m600_state = svv.m600_state|default('') %}

    {% if m600_state == 'loading' %}
        SAVE_VARIABLE VARIABLE=m600_state VALUE="'purging'"
        _INTERNAL_LOAD_FILAMENT
        M117 Purge complete. Click RESUME again to continue.
    {% elif m600_state == 'purging' %}
        SAVE_VARIABLE VARIABLE=m600_state VALUE="''"
        RESTORE_GCODE_STATE NAME=M600_state MOVE=1
        M117 Print Resuming...
        RESUME_BASE
    {% else %}
        RESUME_BASE
    {% endif %}


## --- INTERNAL HELPERS ---
[gcode_macro _INTERNAL_LOAD_FILAMENT]
gcode:
    {% set V = printer["gcode_macro _USER_VARIABLES_FILAMENT_HANDLING"] %}
    {% set svv = printer.save_variables.variables %}
    {% set filament = svv.get(svv.get("filament_installed_t0")) %}

    {action_respond_info("Loading %s..." % filament.name)}
    M109 S{filament.extruder}
    M83 ; Relative extrusion
    G1 E{V.load_length} F400
    G1 E{V.purge_length} F300
    M82 ; Absolute extrusion
    M117 Filament Loaded


[gcode_macro _INTERNAL_UNLOAD_FILAMENT]
gcode:
    {% set V = printer["gcode_macro _USER_VARIABLES_FILAMENT_HANDLING"] %}
    {% set svv = printer.save_variables.variables %}
    {% set filament = svv.get(svv.get("filament_installed_t0")) %}

    {action_respond_info("Unloading %s..." % filament.name)}
    G90 ; Absolute positioning
    G1 X{V.park_x} Y{V.park_y} Z{printer.toolhead.position.z + V.park_z_lift} F6000
    M109 S{filament.extruder}
    M83 ; Relative extrusion
    G1 E5 F300 ; Extrude a little to relieve pressure
    G1 E-{V.unload_length} F1800
    M82 ; Absolute extrusion
    M104 S0
    M117 Filament Unloaded


[gcode_macro _FILAMENTS_ASSERT_FILAMENT_SET]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set filament_key = svv.get("filament_installed_t0") %}
    
    {% if not filament_key or not svv.get(filament_key) %}
        {action_raise_error("No filament is set. Use SET_FILAMENT.")}
    {% endif %}


[gcode_macro _FILAMENTS_SET_FILAMENT]
gcode:
    {% set filament_name = params.NAME|string %}
    {% if not filament_name %}
        {action_raise_error("A filament name is required. e.g., SET_FILAMENT NAME='My Filament'")}
    {% endif %}

    {% set filament_key = "filaments_" ~ (filament_name | lower | replace(" ", "_")) %}
    {% if filament_key not in printer.save_variables.variables %}
        {action_raise_error("Filament preset '%s' not found. Use SETUP_FILAMENT to create it." % filament_name)}
    {% endif %}
    
    SAVE_VARIABLE VARIABLE="filament_installed_t0" VALUE="'{filament_key}'"
    {action_respond_info("Filament set to: %s" % filament_name)}


[gcode_macro _FILAMENTS_UNSET_FILAMENT]
gcode:
    SAVE_VARIABLE VARIABLE="filament_installed_t0" VALUE=None
    {action_respond_info("Filament has been unset.")}


[gcode_macro PREHEAT_EXTRUDER]
description: Start heating the Extruder.
gcode:
    _FILAMENTS_ASSERT_FILAMENT_SET
    {% set svv = printer.save_variables.variables %}
    {% set filament = svv.get(svv.get("filament_installed_t0")) %}
    M104 S{filament.extruder}


[gcode_macro PREHEAT_BED]
description: Start heating the Heater Bed.
gcode:
    _FILAMENTS_ASSERT_FILAMENT_SET
    {% set svv = printer.save_variables.variables %}
    {% set filament = svv.get(svv.get("filament_installed_t0")) %}
    M140 S{filament.bed}