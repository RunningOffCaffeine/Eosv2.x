# TODO:
# * Support for multiple extruders: filament can be set on an extruder
# * Support for multiple extruders: bed temp can be set from one of the selected extruders.
# * If the printer only has 1 tool hide all the TOOL stuff so its not annoying

# Storage structure in Saved variables
# each filament is a structure that stores the extruder and bed temperatures for that filament
#    
#    filaments_Prusament_PETG: {
#        name: "Prusament PETG"
#        extruder: 260
#        bed: 85
#    }
#
#    filaments_KVP_ABS: {
#        name: "KVP ABS"
#        extruder: 250
#        bed: 105
#    }
#
# Filaments set on a tool are stored by reference
# #since multiple extruders are supported, each tool in the machine 
#    filament_installed_t0: "filament_Prusament_PETG"
#    filament_installed_t1: "filament_KVP_ABS"

# [filaments]
# on_set_filament_gcode:
#     # This command runs automatically when you use SET_FILAMENT.
#     # It passes the custom properties from the preset to the macro above.
#     _SET_MPC_FROM_PRESET NAME='{params.PRESET.name}' DENSITY={params.PRESET.density} HEAT_CAPACITY={params.PRESET.heat_capacity}


# This is a comprehensive system for creating, managing, and using
# filament presets that are stored persistently in variables.cfg.

# [gcode_macro _USER_VARIABLES_FILAMENT_HANDLING]
# A place to store user-configurable settings for filament handling macros.
[gcode_macro _USER_VARIABLES_FILAMENT_HANDLING]
variable_park_x: 125      # X coordinate for filament change
variable_park_y: 5        # Y coordinate for filament change
variable_park_z_lift: 50  # Z lift height for filament change
variable_extrude_temp_default: 215 # Fallback temperature if no filament is set

# --- Distances for Direct Drive ---
# variable_unload_length: 60
# variable_load_length: 55
# variable_purge_length: 25

# --- Distances for Bowden ---
variable_unload_length: 100
variable_load_length: 95
variable_purge_length: 25
gcode:
    # This macro does nothing on its own. It's just a container for variables.


# [gcode_macro SETUP_FILAMENT]
# Creates or updates a filament preset with a given name and temperatures.
# Usage: SETUP_FILAMENT NAME="Prusament PETG" EXTRUDER=240 BED=85
[gcode_macro SETUP_FILAMENT]
gcode:
    {% set filament_name = params.NAME|string %}
    {% if not filament_name %}
        {action_raise_error("A name is required. e.g., SETUP_FILAMENT NAME='My Filament'")}
    {% endif %}
    
    {% set extruder_temp = params.EXTRUDER|float %}
    {% if not extruder_temp %}
        {action_raise_error("An extruder temp is required. e.g., SETUP_FILAMENT EXTRUDER=210")}
    {% endif %}

    {% set bed_temp = params.BED|float %}
    {% if not bed_temp %}
        {action_raise_error("A bed temp is required. e.g., SETUP_FILAMENT BED=60")}
    {% endif %}

    # Create a unique key for storing the filament preset
    {% set filament_key = "filaments_" ~ (filament_name | lower | replace(" ", "_")) %}
    # Create the dictionary object for the preset
    {% set filament = {"name": filament_name, "extruder": extruder_temp, "bed": bed_temp} %}
    
    SAVE_VARIABLE VARIABLE="{filament_key}" VALUE="{filament}"

# [gcode_macro SET_FILAMENT]
# Assigns a pre-configured filament preset to a specific toolhead.
# Usage: SET_FILAMENT NAME="Prusament PETG"
# Usage (multi-extruder): SET_FILAMENT NAME="KVP ABS" TOOL_INDEX=1
[gcode_macro SET_FILAMENT]
description: Sets the filament that the printer is using.
gcode:
    _FILAMENTS_ASSERT_TOOL_INDEX_PARAM TOOL_INDEX={params.TOOL_INDEX}
    _FILAMENTS_SET_FILAMENT NAME={params.NAME} TOOL_INDEX={params.TOOL_INDEX}

# [gcode_macro UNSET_FILAMENT]
# Clears the assigned filament from a toolhead.
[gcode_macro UNSET_FILAMENT]
description: Clears the currently set filament from a tool.
gcode:
    _FILAMENTS_ASSERT_TOOL_INDEX_PARAM TOOL_INDEX={params.TOOL_INDEX}
    _FILAMENTS_UNSET_FILAMENT TOOL_INDEX={params.TOOL_INDEX}

# [gcode_macro FILAMENT_STATUS]
# Displays the filament assigned to each toolhead in the console.
[gcode_macro FILAMENT_STATUS]
description: Shows the installed filaments.
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set extruders = [] %}
    {% for name in printer %}
        {% if name.startswith("extruder") %}{% set _ = extruders.append(name) %}{% endif %}
    {% endfor %}
    {% set num_tools = extruders | length %}

    {% if num_tools == 0 %}
        {action_respond_info("No extruders found in this printer!")}
    {% elif num_tools == 1 %}
        {% set filament_key = svv.get("filament_installed_t0") %}
        {% set filament = svv.get(filament_key) if filament_key else None %}
        {% if not filament %}
            {action_respond_info("No Filament Set")}
        {% else %}
            {action_respond_info("Filament: %s - %.0fC/%.0fC" % (filament.name, filament.extruder, filament.bed))}
        {% endif %}
    {% else %}
        {% for i in range(num_tools) %}
            {% set filament_key = svv.get("filament_installed_t" ~ i) %}
            {% set filament = svv.get(filament_key) if filament_key else None %}
            {% set extruder_name = "extruder" if i == 0 else "extruder" ~ i %}
            {% if not filament %}
                {action_respond_info("T%i [%s]: None" % (i, extruder_name))}
            {% else %}
                {action_respond_info("T%i [%s]: %s - %.0fC/%.0fC" % (i, extruder_name, filament.name, filament.extruder, filament.bed))}
            {% endif %}
        {% endfor %}
    {% endif %}

# [gcode_macro LIST_FILAMENTS]
# Lists all saved filament presets from variables.cfg.
[gcode_macro LIST_FILAMENTS]
description: Lists all available filament presets.
gcode:
    {% set svv = printer.save_variables.variables %}
    {action_respond_info("Available Filaments:")}
    {% for key, filament in svv | dictsort %}
        {% if key.startswith("filaments_") %}
            {action_respond_info("- %s: %.0fC / %.0fC" % (filament.name, filament.extruder, filament.bed))}
        {% endif %}
    {% endfor %}

# --- Heating Macros ---
# These macros use the temperatures from the currently set filament.

[gcode_macro PREHEAT]
description: Start heating the extruder and bed for the selected tool.
gcode:
    PREHEAT_BED TOOL_INDEX={params.TOOL_INDEX}
    PREHEAT_EXTRUDER TOOL_INDEX={params.TOOL_INDEX}

[gcode_macro HEAT_AND_WAIT]
description: Heat extruder and bed and wait for both to reach temperature.
gcode:
    _FILAMENTS_ASSERT_TOOL_AND_FILAMENT_SET TOOL_INDEX={params.TOOL_INDEX}
    {% set tool_index = (params.TOOL_INDEX | default(0) | int) %}
    {% set svv = printer.save_variables.variables %}
    {% set filament = svv.get(svv.get("filament_installed_t" ~ tool_index)) %}
    
    {action_respond_info("Heating bed to %.0fC and extruder to %.0fC..." % (filament.bed, filament.extruder))}
    M140 S{filament.bed}
    M104 S{filament.extruder} T{tool_index}
    M190 S{filament.bed}
    M109 S{filament.extruder} T{tool_index}

# --- Load/Unload/Change Macros ---

[gcode_macro LOAD_FILAMENT]
description: Loads filament into the specified tool, using the preset temperature.
gcode:
    _FILAMENTS_ASSERT_TOOL_AND_FILAMENT_SET TOOL_INDEX={params.TOOL_INDEX}
    _INTERNAL_LOAD_FILAMENT TOOL_INDEX={params.TOOL_INDEX}

[gcode_macro UNLOAD_FILAMENT]
description: Unloads filament from the specified tool, using the preset temperature.
gcode:
    _FILAMENTS_ASSERT_TOOL_AND_FILAMENT_SET TOOL_INDEX={params.TOOL_INDEX}
    _INTERNAL_UNLOAD_FILAMENT TOOL_INDEX={params.TOOL_INDEX}

[gcode_macro M600]
description: Filament change macro (same as CHANGE_FILAMENT).
gcode:
    CHANGE_FILAMENT

[gcode_macro CHANGE_FILAMENT]
description: Pause print, unload, wait for new filament, load, and resume.
gcode:
    _FILAMENTS_ASSERT_TOOL_AND_FILAMENT_SET
    PAUSE
    SAVE_GCODE_STATE NAME=M600_state
    _INTERNAL_UNLOAD_FILAMENT
    SAVE_VARIABLE VARIABLE=m600_state VALUE="'loading'"
    M117 Insert new filament and click RESUME

[gcode_macro RESUME]
rename_existing: RESUME_BASE
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set m600_state = svv.m600_state|default('') %}

    {% if m600_state == 'loading' %}
        SAVE_VARIABLE VARIABLE=m600_state VALUE="'purging'"
        _INTERNAL_LOAD_FILAMENT
        M117 Purge complete. Click RESUME again to continue.
    {% elif m600_state == 'purging' %}
        SAVE_VARIABLE VARIABLE=m600_state VALUE="''"
        RESTORE_GCODE_STATE NAME=M600_state MOVE=1
        M117 Print Resuming...
        RESUME_BASE
    {% else %}
        RESUME_BASE
    {% endif %}

# --- Internal Helper Macros ---
# These macros contain the core logic and are called by the user-facing macros above.

[gcode_macro _INTERNAL_LOAD_FILAMENT]
gcode:
    {% set V = printer["gcode_macro _USER_VARIABLES_FILAMENT_HANDLING"] %}
    {% set tool_index = (params.TOOL_INDEX | default(0) | int) %}
    {% set svv = printer.save_variables.variables %}
    {% set filament = svv.get(svv.get("filament_installed_t" ~ tool_index)) %}

    {action_respond_info("Loading %s..." % filament.name)}
    M109 S{filament.extruder} T{tool_index}
    M83 ; Relative extrusion
    G1 E{V.load_length} F400
    G1 E{V.purge_length} F300
    M82 ; Absolute extrusion
    M117 Filament Loaded

[gcode_macro _INTERNAL_UNLOAD_FILAMENT]
gcode:
    {% set V = printer["gcode_macro _USER_VARIABLES_FILAMENT_HANDLING"] %}
    {% set tool_index = (params.TOOL_INDEX | default(0) | int) %}
    {% set svv = printer.save_variables.variables %}
    {% set filament = svv.get(svv.get("filament_installed_t" ~ tool_index)) %}

    {action_respond_info("Unloading %s..." % filament.name)}
    G90 ; Absolute positioning
    G1 X{V.park_x} Y{V.park_y} Z{printer.toolhead.position.z + V.park_z_lift} F6000
    M109 S{filament.extruder} T{tool_index}
    M83 ; Relative extrusion
    G1 E5 F300 ; Extrude a little to relieve pressure
    G1 E-{V.unload_length} F1800
    M82 ; Absolute extrusion
    M104 S0 T{tool_index}
    M117 Filament Unloaded

[gcode_macro _FILAMENTS_ASSERT_TOOL_INDEX_PARAM]
gcode:
    {% set extruders = [] %}
    {% for name in printer %}
        {% if name.startswith("extruder") %}{% set _ = extruders.append(name) %}{% endif %}
    {% endfor %}
    {% set num_tools = extruders | length %}
    {% set tool_param = params.TOOL_INDEX %}
    
    {% if num_tools == 0 %}
        {action_raise_error("Your printer has no extruders configured!")}
    {% elif num_tools > 1 and tool_param is none %}
        {action_raise_error("Your printer has %i tools. Please specify a TOOL_INDEX (0 to %i)." % (num_tools, num_tools - 1))}
    {% elif tool_param is not none %}
        {% set tool_index = tool_param | int %}
        {% if tool_index < 0 or tool_index >= num_tools %}
            {action_raise_error("Invalid TOOL_INDEX=%i. Must be between 0 and %i." % (tool_index, num_tools - 1))}
        {% endif %}
    {% endif %}

[gcode_macro _FILAMENTS_ASSERT_FILAMENT_SET]
gcode:
    {% set tool_index = (params.TOOL_INDEX | default(0) | int) %}
    {% set svv = printer.save_variables.variables %}
    {% set filament_key = svv.get("filament_installed_t" ~ tool_index) %}
    
    {% if not filament_key or not svv.get(filament_key) %}
        {% set num_tools = 0 %}
        {% for name in printer %}{% if name.startswith("extruder") %}{% set num_tools = num_tools + 1 %}{% endif %}{% endfor %}
        {% if num_tools > 1 %}
            {action_raise_error("No filament is set for T%i. Use SET_FILAMENT." % tool_index)}
        {% else %}
            {action_raise_error("No filament is set. Use SET_FILAMENT.")}
        {% endif %}
    {% endif %}

[gcode_macro _FILAMENTS_ASSERT_TOOL_AND_FILAMENT_SET]
gcode:
    _FILAMENTS_ASSERT_TOOL_INDEX_PARAM TOOL_INDEX={params.TOOL_INDEX}
    _FILAMENTS_ASSERT_FILAMENT_SET TOOL_INDEX={params.TOOL_INDEX}

[gcode_macro _FILAMENTS_SET_FILAMENT]
gcode:
    {% set filament_name = params.NAME|string %}
    {% if not filament_name %}
        {action_raise_error("A filament name is required. e.g., SET_FILAMENT NAME='My Filament'")}
    {% endif %}

    {% set filament_key = "filaments_" ~ (filament_name | lower | replace(" ", "_")) %}
    {% if filament_key not in printer.save_variables.variables %}
        {action_raise_error("Filament preset '%s' not found. Use SETUP_FILAMENT to create it." % filament_name)}
    {% endif %}

    {% set tool_index = (params.TOOL_INDEX | default(0) | int) %}
    {% set filament_installed_key = "filament_installed_t" ~ tool_index %}
    
    SAVE_VARIABLE VARIABLE="{filament_installed_key}" VALUE="'{filament_key}'"
    {action_respond_info("T%i set to: %s" % (tool_index, filament_name))}

[gcode_macro _FILAMENTS_UNSET_FILAMENT]
gcode:
    {% set tool_index = (params.TOOL_INDEX | default(0) | int) %}
    {% set filament_installed_key = "filament_installed_t" ~ tool_index %}
    SAVE_VARIABLE VARIABLE="{filament_installed_key}" VALUE=None
    {action_respond_info("Filament for T%i has been unset." % tool_index)}

[gcode_macro PREHEAT_EXTRUDER]
description: Start heating the Extruder for the selected tool.
gcode:
    _FILAMENTS_ASSERT_TOOL_AND_FILAMENT_SET TOOL_INDEX={params.TOOL_INDEX}
    {% set tool_index = (params.TOOL_INDEX | default(0) | int) %}
    {% set svv = printer.save_variables.variables %}
    {% set filament = svv.get(svv.get("filament_installed_t" ~ tool_index)) %}
    M104 S{filament.extruder} T{tool_index}

[gcode_macro PREHEAT_BED]
description: Start heating the Heater Bed for the selected tool.
gcode:
    _FILAMENTS_ASSERT_TOOL_AND_FILAMENT_SET TOOL_INDEX={params.TOOL_INDEX}
    {% set tool_index = (params.TOOL_INDEX | default(0) | int) %}
    {% set svv = printer.save_variables.variables %}
    {% set filament = svv.get(svv.get("filament_installed_t" ~ tool_index)) %}
    M140 S{filament.bed}


